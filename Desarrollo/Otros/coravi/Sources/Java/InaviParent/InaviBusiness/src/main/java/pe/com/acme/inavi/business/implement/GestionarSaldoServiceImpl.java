/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   17/03/2016 17:34:43
*/

package pe.com.acme.inavi.business.implement;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pe.com.acme.domain.mybatis.mapper.CuentaAmortizacionMapper;
import pe.com.acme.domain.mybatis.mapper.CuentaXCobrarMapper;
import pe.com.acme.domain.mybatis.mapper.GuiaMapper;
import pe.com.acme.domain.mybatis.mapper.GuiaSaldoMapper;
import pe.com.acme.domain.mybatis.model.CuentaAmortizacion;
import pe.com.acme.domain.mybatis.model.CuentaXCobrar;
import pe.com.acme.domain.mybatis.model.Guia;
import pe.com.acme.domain.mybatis.model.GuiaKey;
import pe.com.acme.domain.mybatis.model.GuiaSaldo;
import pe.com.acme.domain.mybatis.model.GuiaSaldoExample;
import pe.com.acme.inavi.business.service.GestionarSaldoService;
import pe.com.acme.inavi.business.util.InaviConstantes;
import pe.com.acme.query.mybatis.mapper.CuentaXCobrarQueryMapper;
import pe.com.acme.query.mybatis.mapper.GuiaQueryMapper;
import pe.com.acme.query.mybatis.mapper.SaldoPorGuiaQueryMapper;
import pe.com.acme.query.mybatis.model.CuentaXCobrarQuery;
import pe.com.acme.query.mybatis.model.CuentaXCobrarQueryCriteria;
import pe.com.acme.query.mybatis.model.GuiaQuery;
import pe.com.acme.query.mybatis.model.GuiaQueryCriteria;
import pe.com.acme.query.mybatis.model.GuiaSaldoQuery;
import pe.com.acme.query.mybatis.model.SaldoPorGuiaQuery;
import pe.com.acme.query.mybatis.model.SaldoPorGuiaQueryCriteria;
import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

@Service
public class GestionarSaldoServiceImpl extends MybatisRepositoryHelper implements GestionarSaldoService {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(SaldoPorGuiaQuery model) throws Exception {
		
		Integer lastId = null;

		Guia guia = dtoUtil.copyBean(model, Guia.class);
		this.insertSelective(GuiaMapper.class, guia);
		
        this.insertNewRecordsGuiaSaldoQuery(model.getListGuiaSaldoQuery(), guia.getId_guia());
		lastId = guia.getId_guia();
		return lastId;

	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(SaldoPorGuiaQuery model) throws Exception {
			
        this.insertNewRecordsGuiaSaldoQuery(model.getListGuiaSaldoQuery(), model.getId_guia());
        this.updateModifiedRecordsGuiaSaldoQuery(model.getListGuiaSaldoQuery());
        this.removeRecordsGuiaSaldoQuery(model.getListGuiaSaldoQuery(), true);
        
    	GuiaKey guiaKey = new GuiaKey();
    	guiaKey.setId_guia(model.getId_guia());
    	Guia guia = this.selectByPrimaryKey(GuiaMapper.class, guiaKey);
    	
    	GuiaSaldoExample guiaSaldoExample = new GuiaSaldoExample();
    	guiaSaldoExample.createCriteria().andId_guiaEqualTo(guia.getId_guia());
    	
    	List<GuiaSaldo> listGuiaSaldo = this.selectByExample(GuiaSaldoMapper.class, guiaSaldoExample);
    	
    	double totalSaldado = this.getTotalSaldado(listGuiaSaldo);
    	
        if(totalSaldado >= guia.getTotal_importe().doubleValue()){
        	guia.setId_estado(InaviConstantes.ESTADO_GUIA_VENTA_SALDADO);
        }else{
        	guia.setId_estado(InaviConstantes.ESTADO_GUIA_VENTA_POR_SALDAR);
        }
        
        this.updateByPrimaryKey(GuiaMapper.class, guia);
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(SaldoPorGuiaQuery model) throws Exception {
	
        this.removeRecordsGuiaSaldoQuery(model.getListGuiaSaldoQuery(), false);

		Guia guia = dtoUtil.copyBean(model, Guia.class);
		this.deleteByPrimaryKey(GuiaMapper.class, guia);
	}

	@Override
	public List<SaldoPorGuiaQuery> list(SaldoPorGuiaQueryCriteria criteria) throws Exception {
		List<SaldoPorGuiaQuery> list = this.selectByQuery(SaldoPorGuiaQueryMapper.class, criteria, criteria.getStart(), criteria.getLimit());
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(SaldoPorGuiaQueryCriteria criteria) throws Exception {
		int count = this.selectCountByQuery(SaldoPorGuiaQueryMapper.class, criteria);
		return count;
	}

    @Transactional(rollbackForClassName = {"Exception"})
    private void insertNewRecordsGuiaSaldoQuery(List<GuiaSaldoQuery> listGuiaSaldoQuery, Integer id) throws Exception{

        for(GuiaSaldoQuery guiaSaldoQuery : listGuiaSaldoQuery){

            if(guiaSaldoQuery.isNewEntry()){
                guiaSaldoQuery.setId_guia(id);
                GuiaSaldo guiaSaldo = dtoUtil.copyBean(guiaSaldoQuery, GuiaSaldo.class);                
                this.insertSelective(GuiaSaldoMapper.class, guiaSaldo);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void updateModifiedRecordsGuiaSaldoQuery(List<GuiaSaldoQuery> listGuiaSaldoQuery) throws Exception{

        for(GuiaSaldoQuery guiaSaldoQuery : listGuiaSaldoQuery){

            if(guiaSaldoQuery.isUpdatedRecord()){
            	GuiaSaldo guiaSaldo = dtoUtil.copyBean(guiaSaldoQuery, GuiaSaldo.class);
            	this.updateByPrimaryKeySelective(GuiaSaldoMapper.class, guiaSaldo);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void removeRecordsGuiaSaldoQuery(List<GuiaSaldoQuery> listGuiaSaldoQuery, boolean onlyFlag) throws Exception{

    	for(GuiaSaldoQuery guiaSaldoQuery : listGuiaSaldoQuery){

            if(onlyFlag){
                if(guiaSaldoQuery.isRemovedRecord()){
                    GuiaSaldo guiaSaldo = dtoUtil.copyBean(guiaSaldoQuery, GuiaSaldo.class);
                    this.deleteByPrimaryKey(GuiaSaldoMapper.class, guiaSaldo);
                }
            }else{
            	GuiaSaldo guiaSaldo = dtoUtil.copyBean(guiaSaldoQuery, GuiaSaldo.class);
                this.deleteByPrimaryKey(GuiaSaldoMapper.class, guiaSaldo);
            }

        }

    }	
    
    public double getTotalSaldado(List<GuiaSaldo> list){
    	
    	double total = 0;
    	
		for (GuiaSaldo guiaSaldo : list) {
			if(guiaSaldo.getId_estado().intValue() == 1){
				total = total + guiaSaldo.getMonto_amortizado().doubleValue();
			}
		}
		
		return total;
    }

    @Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void grabarSaldoAmortizado(String fecha_pago, Integer id_cliente, Double montoAmortizado) throws Exception {
    	
    	SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
    	Date date = formatter.parse(fecha_pago);
    	
    	GuiaQueryCriteria guiaQueryCriteria = new GuiaQueryCriteria();
		guiaQueryCriteria.setId_cliente(id_cliente);
		guiaQueryCriteria.setId_estado(InaviConstantes.ESTADO_GUIA_VENTA_POR_SALDAR);
		
        List<GuiaQuery> listGuiaQuery = this.selectByQuery(GuiaQueryMapper.class,guiaQueryCriteria);
		
		CuentaXCobrarQueryCriteria cuentaXCobrarQueryCriteria = new CuentaXCobrarQueryCriteria();
		cuentaXCobrarQueryCriteria.setId_cliente(id_cliente);
		cuentaXCobrarQueryCriteria.setId_estado(InaviConstantes.ESTADO_GUIA_VENTA_POR_SALDAR);
		
		List<CuentaXCobrarQuery> cuentaXCobrarQueries = this.selectByQuery(CuentaXCobrarQueryMapper.class,cuentaXCobrarQueryCriteria);
				
		for (CuentaXCobrarQuery cuentaXCobrarQuery : cuentaXCobrarQueries) {
			
			if(montoAmortizado.doubleValue() > 0){
				
				CuentaAmortizacion cuentaAmortizacion = new CuentaAmortizacion();
				cuentaAmortizacion.setFecha_saldo(date);
				cuentaAmortizacion.setId_cuenta_x_cobrar(cuentaXCobrarQuery.getId_cuenta_x_cobrar());
				cuentaAmortizacion.setId_estado(InaviConstantes.ESTADO_GENERICO_ACTIVO);
				
				if(montoAmortizado.doubleValue() > cuentaXCobrarQuery.getTotal_deuda().doubleValue()){
					
					montoAmortizado = montoAmortizado.doubleValue() - cuentaXCobrarQuery.getTotal_deuda().doubleValue();
					cuentaAmortizacion.setMonto_amortizado(new BigDecimal(cuentaXCobrarQuery.getTotal_deuda()));
					
					CuentaXCobrar cuentaXCobrar = new CuentaXCobrar();
					cuentaXCobrar.setId_cuenta_x_cobrar(cuentaXCobrarQuery.getId_cuenta_x_cobrar());
					cuentaXCobrar.setId_estado(InaviConstantes.ESTADO_GUIA_VENTA_SALDADO);
					this.updateByPrimaryKeySelective(CuentaXCobrarMapper.class, cuentaXCobrar);
					
				}else if (montoAmortizado.doubleValue() <= cuentaXCobrarQuery.getTotal_deuda().doubleValue()){
					
					cuentaAmortizacion.setMonto_amortizado(new BigDecimal(montoAmortizado.doubleValue()));
					
					double diff = cuentaXCobrarQuery.getTotal_deuda().doubleValue() - montoAmortizado.doubleValue(); 
					
					if(diff == 0){
						CuentaXCobrar cuentaXCobrar = new CuentaXCobrar();
						cuentaXCobrar.setId_cuenta_x_cobrar(cuentaXCobrarQuery.getId_cuenta_x_cobrar());
						cuentaXCobrar.setId_estado(InaviConstantes.ESTADO_GUIA_VENTA_SALDADO);
						this.updateByPrimaryKeySelective(CuentaXCobrarMapper.class, cuentaXCobrar);
					}
					
					montoAmortizado = new Double(0);
					
				}
				
				this.insertSelective(CuentaAmortizacionMapper.class, cuentaAmortizacion);
				
			}
			
		}
		
		for (GuiaQuery guiaQuery : listGuiaQuery) {
			
			if(montoAmortizado.doubleValue() > 0){
				
				GuiaSaldo guiaSaldo = new GuiaSaldo();
				guiaSaldo.setId_guia(guiaQuery.getId_guia());
				guiaSaldo.setFecha_saldo(date);
				guiaSaldo.setId_estado(InaviConstantes.ESTADO_GENERICO_ACTIVO);
				
				if(montoAmortizado.doubleValue() > guiaQuery.getTotal_deuda().doubleValue()){
					
					montoAmortizado = montoAmortizado.doubleValue() - guiaQuery.getTotal_deuda().doubleValue();
					guiaSaldo.setMonto_amortizado(new BigDecimal(guiaQuery.getTotal_deuda()));
					
					Guia guia = new Guia();
					guia.setId_guia(guiaQuery.getId_guia());
					guia.setId_estado(InaviConstantes.ESTADO_GUIA_VENTA_SALDADO);
					this.updateByPrimaryKeySelective(GuiaMapper.class, guia);
					
				}else if (montoAmortizado.doubleValue() <= guiaQuery.getTotal_deuda().doubleValue()){
					
					guiaSaldo.setMonto_amortizado(new BigDecimal(montoAmortizado.doubleValue()));
					
					double diff = guiaQuery.getTotal_deuda().doubleValue() - montoAmortizado.doubleValue();
					
					if(diff == 0){
						Guia guia = new Guia();
						guia.setId_guia(guiaQuery.getId_guia());
						guia.setId_estado(InaviConstantes.ESTADO_GUIA_VENTA_SALDADO);
						this.updateByPrimaryKeySelective(GuiaMapper.class, guia);
					}
					
					montoAmortizado = new Double(0);
					
				}
				
				this.insertSelective(GuiaSaldoMapper.class, guiaSaldo);
			}
			
		}
		
		if(montoAmortizado.doubleValue() > 0){
			throw new Exception("El monto enviado es superior al total de la deuda.");
		}
	}
}
