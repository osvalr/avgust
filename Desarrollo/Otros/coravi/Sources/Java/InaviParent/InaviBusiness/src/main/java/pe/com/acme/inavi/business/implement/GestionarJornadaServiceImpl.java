/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   01/03/2016 01:00:19
*/

package pe.com.acme.inavi.business.implement;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pe.com.acme.domain.mybatis.mapper.GuiaMapper;
import pe.com.acme.domain.mybatis.mapper.JornadaMapper;
import pe.com.acme.domain.mybatis.model.Guia;
import pe.com.acme.domain.mybatis.model.GuiaExample;
import pe.com.acme.domain.mybatis.model.Jornada;
import pe.com.acme.domain.mybatis.model.JornadaKey;
import pe.com.acme.inavi.business.service.GestionarJornadaService;
import pe.com.acme.query.mybatis.mapper.JornadaLaboralQueryMapper;
import pe.com.acme.query.mybatis.model.JornadaLaboralQuery;
import pe.com.acme.query.mybatis.model.JornadaLaboralQueryCriteria;
import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

@Service
public class GestionarJornadaServiceImpl extends MybatisRepositoryHelper implements GestionarJornadaService {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(JornadaLaboralQuery model) throws Exception {
	
		Integer lastId = null;

		Jornada jornada = dtoUtil.copyBean(model, Jornada.class);
		jornada.setNum_anio(this.getAnio(jornada.getFecha_jornada()));
		jornada.setNum_mes(this.getMes(jornada.getFecha_jornada()));
		jornada.setNum_dia(this.getDia(jornada.getFecha_jornada()));
		
		if(buscarJornada(jornada.getNum_anio(), jornada.getNum_mes(), jornada.getNum_dia()) != null){
			throw new Exception("La fecha de jornada ya existe." );
		}
		
		this.insertSelective(JornadaMapper.class, jornada);

		lastId = jornada.getNum_anio();
		return lastId;
	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(JornadaLaboralQuery model) throws Exception {

		Jornada jornada = dtoUtil.copyBean(model, Jornada.class);
		this.updateByPrimaryKeySelective(JornadaMapper.class, jornada);
		
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(JornadaLaboralQuery model) throws Exception {

		Jornada jornada = dtoUtil.copyBean(model, Jornada.class);
		
		if(existenGuiasPorJornada(jornada.getNum_anio(), jornada.getNum_mes(), jornada.getNum_dia())){
			throw new Exception("Existen Guias vinculadas a esta fecha de jornada, no es posible eliminarla." );
		}
		
		this.deleteByPrimaryKey(JornadaMapper.class, jornada);
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public List<JornadaLaboralQuery> list(JornadaLaboralQueryCriteria criteria) throws Exception {
		List<JornadaLaboralQuery> list = this.selectByQuery(JornadaLaboralQueryMapper.class, criteria, criteria.getStart(), criteria.getLimit());
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(JornadaLaboralQueryCriteria criteria) throws Exception {
		int count = this.selectCountByQuery(JornadaLaboralQueryMapper.class, criteria);
		return count;
	}
	public int getDia(Date date){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);
		return dayOfMonth;
	}
	
	public int getMes(Date date){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		int month = cal.get(Calendar.MONTH);
		return (month+1);
	}
	
	public int getAnio(Date date){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		int year = cal.get(Calendar.YEAR);
		return year;
	}
	
	public Jornada buscarJornada(Integer num_anio, Integer num_mes, Integer num_dia) throws Exception{
		
		JornadaKey jornadaKey = new JornadaKey();
		jornadaKey.setNum_anio(num_anio);
		jornadaKey.setNum_mes(num_mes);
		jornadaKey.setNum_dia(num_dia);
		
		Jornada jornada = this.selectByPrimaryKey(JornadaMapper.class, jornadaKey);
		
		return jornada;
	}
	
	public boolean existenGuiasPorJornada(Integer num_anio, Integer num_mes, Integer num_dia) throws Exception{
		
		GuiaExample guiaExample = new GuiaExample();
		guiaExample.createCriteria().andNum_anioEqualTo(num_anio).andNum_mesEqualTo(num_mes).andNum_diaEqualTo(num_dia);
		
		List<Guia> list = this.selectByExample(GuiaMapper.class, guiaExample);
		
		if(list.isEmpty()){
			return false;
		}else{
			return true;
		}

	}
}
