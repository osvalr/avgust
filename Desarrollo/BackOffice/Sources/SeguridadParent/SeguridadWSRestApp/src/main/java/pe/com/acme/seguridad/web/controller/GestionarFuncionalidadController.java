/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by GeneratorCrud v.1.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   26/02/2016 21:13:26
*/

package pe.com.acme.seguridad.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import pe.com.acme.util.web.ControllerHelper;
import pe.com.acme.util.JsonReturnUtil;
import pe.com.acme.util.ModelWrapper;

import pe.com.acme.seguridad.business.service.GestionarFuncionalidadService;
import pe.com.acme.query.mybatis.model.FuncionalidadCrud;
import pe.com.acme.query.mybatis.model.FuncionalidadCrudCriteria;

import pe.com.acme.query.mybatis.model.FuncionalidadRolSubCrud;
import pe.com.acme.query.mybatis.mapper.FuncionalidadRolSubCrudMapper;

@Controller
@RequestMapping("/GestionarFuncionalidad")
public class GestionarFuncionalidadController extends ControllerHelper{

    private static Logger log = Logger.getLogger(GestionarFuncionalidadController.class);

	@Autowired
	private GestionarFuncionalidadService gestionarFuncionalidadService;

	@RequestMapping(value="/list")
	public @ResponseBody Map<String,? extends Object> list(HttpServletRequest request) {
		try{
			FuncionalidadCrudCriteria funcionalidadCrudCriteria = this.loadCriteria(request, FuncionalidadCrudCriteria.class);
            List<FuncionalidadCrud> listFuncionalidadCrud = gestionarFuncionalidadService.list(funcionalidadCrudCriteria);
			int count = gestionarFuncionalidadService.countRecords(funcionalidadCrudCriteria);
			return JsonReturnUtil.success(listFuncionalidadCrud,count);
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/create")
	public @ResponseBody Map<String,? extends Object> create(@RequestBody ModelWrapper<FuncionalidadCrud> modelWrapper, HttpSession session) {
		try{
		
            List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud = (List<FuncionalidadRolSubCrud>) session.getAttribute("listFuncionalidadRolSubCrud");
            modelWrapper.getData().setListFuncionalidadRolSubCrud(listFuncionalidadRolSubCrud);
            gestionarFuncionalidadService.create(modelWrapper.getData());
            session.setAttribute("listFuncionalidadRolSubCrud",null);
            return JsonReturnUtil.success(modelWrapper.getData().getId_funcionalidad());

		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/update")
	public @ResponseBody Map<String,? extends Object> update(@RequestBody ModelWrapper<FuncionalidadCrud> modelWrapper, HttpSession session) throws Exception {
		try{
			List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud = (List<FuncionalidadRolSubCrud>) session.getAttribute("listFuncionalidadRolSubCrud");
            modelWrapper.getData().setListFuncionalidadRolSubCrud(listFuncionalidadRolSubCrud);
                        
			gestionarFuncionalidadService.update(modelWrapper.getData());
			session.setAttribute("listFuncionalidadRolSubCrud",null);
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="/destroy")
	public @ResponseBody Map<String,? extends Object> destroy(@RequestBody ModelWrapper<FuncionalidadCrud> modelWrapper, HttpSession session) {
		try{
			Map<String, Object> paramMap = null;
			paramMap = this.getParamMap();
			paramMap.put("id_funcionalidad", modelWrapper.getData().getId_funcionalidad());
			List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud = this.gestionarFuncionalidadService.selectByQuery(FuncionalidadRolSubCrudMapper.class, paramMap);
			modelWrapper.getData().setListFuncionalidadRolSubCrud(listFuncionalidadRolSubCrud);
			gestionarFuncionalidadService.destroy(modelWrapper.getData());
			session.setAttribute("listFuncionalidadRolSubCrud",null);
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/listFuncionalidadRolSubCrud")
	public @ResponseBody Map<String,? extends Object> listFuncionalidadRolSubCrud(Integer id_funcionalidad, int start, int limit, HttpSession session) throws Exception {
		try{
		
			List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud;
			List<FuncionalidadRolSubCrud> subListFuncionalidadRolSubCrud;
	
			if(id_funcionalidad == null){
				listFuncionalidadRolSubCrud = (List<FuncionalidadRolSubCrud>) session.getAttribute("listFuncionalidadRolSubCrud");
			}else if(id_funcionalidad.equals(-1)){
				listFuncionalidadRolSubCrud = new ArrayList<FuncionalidadRolSubCrud>();
			}else{
				Map<String, Object> paramMap = this.getParamMap();
				paramMap.put("id_funcionalidad", id_funcionalidad);
				listFuncionalidadRolSubCrud = this.gestionarFuncionalidadService.selectByQuery(FuncionalidadRolSubCrudMapper.class, paramMap);
				this.setRandomId(listFuncionalidadRolSubCrud);
			}
	
			if(listFuncionalidadRolSubCrud == null){
				listFuncionalidadRolSubCrud = new ArrayList<FuncionalidadRolSubCrud>();
			}
			session.setAttribute("listFuncionalidadRolSubCrud",listFuncionalidadRolSubCrud);
			int size = listFuncionalidadRolSubCrud.size();
			subListFuncionalidadRolSubCrud = (List<FuncionalidadRolSubCrud>) this.getSubList(listFuncionalidadRolSubCrud, start, limit);
			return JsonReturnUtil.success(subListFuncionalidadRolSubCrud,size);
			
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/createFuncionalidadRolSubCrud")
	public @ResponseBody Map<String,? extends Object> createFuncionalidadRolSubCrud(@RequestBody ModelWrapper<FuncionalidadRolSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud = (List<FuncionalidadRolSubCrud>) session.getAttribute("listFuncionalidadRolSubCrud");
			int randomInt = this.getNegativeIdRandom();
			modelWrapper.getData().setRownum(randomInt);
			modelWrapper.getData().setNewEntry(true);
			if(listFuncionalidadRolSubCrud == null){
				listFuncionalidadRolSubCrud = new ArrayList<FuncionalidadRolSubCrud>();
			}
			listFuncionalidadRolSubCrud.add(modelWrapper.getData());	
			//session.setAttribute("listFuncionalidadRolSubCrud",listFuncionalidadRolSubCrud);
	
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/updateFuncionalidadRolSubCrud")
	public @ResponseBody Map<String,? extends Object> updateFuncionalidadRolSubCrud(@RequestBody ModelWrapper<FuncionalidadRolSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud = (List<FuncionalidadRolSubCrud>) session.getAttribute("listFuncionalidadRolSubCrud");
			FuncionalidadRolSubCrud funcionalidadRolSubCrud = (FuncionalidadRolSubCrud) this.find(listFuncionalidadRolSubCrud, modelWrapper.getData());
			modelWrapper.getData().setUpdatedRecord(true);
			if(funcionalidadRolSubCrud != null){
	        	listFuncionalidadRolSubCrud.set(listFuncionalidadRolSubCrud.indexOf(funcionalidadRolSubCrud), modelWrapper.getData());
			}
			//session.setAttribute("listFuncionalidadRolSubCrud",listFuncionalidadRolSubCrud);
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/destroyFuncionalidadRolSubCrud")
	public @ResponseBody Map<String,? extends Object> destroyFuncionalidadRolSubCrud(@RequestBody ModelWrapper<FuncionalidadRolSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud = (List<FuncionalidadRolSubCrud>) session.getAttribute("listFuncionalidadRolSubCrud");
			FuncionalidadRolSubCrud funcionalidadRolSubCrud = (FuncionalidadRolSubCrud) this.find(listFuncionalidadRolSubCrud, modelWrapper.getData());
			modelWrapper.getData().setRemovedRecord(true);
			if(funcionalidadRolSubCrud != null){
	        	listFuncionalidadRolSubCrud.set(listFuncionalidadRolSubCrud.indexOf(funcionalidadRolSubCrud), modelWrapper.getData());
			}		
			//session.setAttribute("listFuncionalidadRolSubCrud",listFuncionalidadRolSubCrud);
	        return JsonReturnUtil.success();
	        
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
}