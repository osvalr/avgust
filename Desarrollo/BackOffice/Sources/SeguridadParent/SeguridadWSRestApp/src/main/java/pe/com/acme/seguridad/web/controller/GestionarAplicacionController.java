/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by GeneratorCrud v.1.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   26/02/2016 20:07:02
*/

package pe.com.acme.seguridad.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import pe.com.acme.util.web.ControllerHelper;
import pe.com.acme.util.JsonReturnUtil;
import pe.com.acme.util.ModelWrapper;

import pe.com.acme.seguridad.business.service.GestionarAplicacionService;
import pe.com.acme.query.mybatis.model.AplicacionCrud;
import pe.com.acme.query.mybatis.model.AplicacionCrudCriteria;

import pe.com.acme.query.mybatis.model.PerfilAplicacionSubCrud;
import pe.com.acme.query.mybatis.mapper.PerfilAplicacionSubCrudMapper;

@Controller
@RequestMapping("/GestionarAplicacion")
public class GestionarAplicacionController extends ControllerHelper{

    private static Logger log = Logger.getLogger(GestionarAplicacionController.class);

	@Autowired
	private GestionarAplicacionService gestionarAplicacionService;

	@RequestMapping(value="/list")
	public @ResponseBody Map<String,? extends Object> list(HttpServletRequest request) {
		try{
			AplicacionCrudCriteria aplicacionCrudCriteria = this.loadCriteria(request, AplicacionCrudCriteria.class);
            List<AplicacionCrud> listAplicacionCrud = gestionarAplicacionService.list(aplicacionCrudCriteria);
			int count = gestionarAplicacionService.countRecords(aplicacionCrudCriteria);
			return JsonReturnUtil.success(listAplicacionCrud,count);
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/create")
	public @ResponseBody Map<String,? extends Object> create(@RequestBody ModelWrapper<AplicacionCrud> modelWrapper, HttpSession session) {
		try{
		
            List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud = (List<PerfilAplicacionSubCrud>) session.getAttribute("listPerfilAplicacionSubCrud");
            modelWrapper.getData().setListPerfilAplicacionSubCrud(listPerfilAplicacionSubCrud);
            gestionarAplicacionService.create(modelWrapper.getData());
            session.setAttribute("listPerfilAplicacionSubCrud",null);
            return JsonReturnUtil.success(modelWrapper.getData().getId_aplicacion());

		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/update")
	public @ResponseBody Map<String,? extends Object> update(@RequestBody ModelWrapper<AplicacionCrud> modelWrapper, HttpSession session) throws Exception {
		try{
			List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud = (List<PerfilAplicacionSubCrud>) session.getAttribute("listPerfilAplicacionSubCrud");
            modelWrapper.getData().setListPerfilAplicacionSubCrud(listPerfilAplicacionSubCrud);
                        
			gestionarAplicacionService.update(modelWrapper.getData());
			session.setAttribute("listPerfilAplicacionSubCrud",null);
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="/destroy")
	public @ResponseBody Map<String,? extends Object> destroy(@RequestBody ModelWrapper<AplicacionCrud> modelWrapper, HttpSession session) {
		try{
			Map<String, Object> paramMap = null;
			paramMap = this.getParamMap();
			paramMap.put("id_aplicacion", modelWrapper.getData().getId_aplicacion());
			List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud = this.gestionarAplicacionService.selectByQuery(PerfilAplicacionSubCrudMapper.class, paramMap);
			modelWrapper.getData().setListPerfilAplicacionSubCrud(listPerfilAplicacionSubCrud);
			gestionarAplicacionService.destroy(modelWrapper.getData());
			session.setAttribute("listPerfilAplicacionSubCrud",null);
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/listPerfilAplicacionSubCrud")
	public @ResponseBody Map<String,? extends Object> listPerfilAplicacionSubCrud(Integer id_aplicacion, int start, int limit, HttpSession session) throws Exception {
		try{
		
			List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud;
			List<PerfilAplicacionSubCrud> subListPerfilAplicacionSubCrud;
	
			if(id_aplicacion == null){
				listPerfilAplicacionSubCrud = (List<PerfilAplicacionSubCrud>) session.getAttribute("listPerfilAplicacionSubCrud");
			}else if(id_aplicacion.equals(-1)){
				listPerfilAplicacionSubCrud = new ArrayList<PerfilAplicacionSubCrud>();
			}else{
				Map<String, Object> paramMap = this.getParamMap();
				paramMap.put("id_aplicacion", id_aplicacion);
				listPerfilAplicacionSubCrud = this.gestionarAplicacionService.selectByQuery(PerfilAplicacionSubCrudMapper.class, paramMap);
				this.setRandomId(listPerfilAplicacionSubCrud);
			}
	
			if(listPerfilAplicacionSubCrud == null){
				listPerfilAplicacionSubCrud = new ArrayList<PerfilAplicacionSubCrud>();
			}
			session.setAttribute("listPerfilAplicacionSubCrud",listPerfilAplicacionSubCrud);
			int size = listPerfilAplicacionSubCrud.size();
			subListPerfilAplicacionSubCrud = (List<PerfilAplicacionSubCrud>) this.getSubList(listPerfilAplicacionSubCrud, start, limit);
			return JsonReturnUtil.success(subListPerfilAplicacionSubCrud,size);
			
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/createPerfilAplicacionSubCrud")
	public @ResponseBody Map<String,? extends Object> createPerfilAplicacionSubCrud(@RequestBody ModelWrapper<PerfilAplicacionSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud = (List<PerfilAplicacionSubCrud>) session.getAttribute("listPerfilAplicacionSubCrud");
			int randomInt = this.getNegativeIdRandom();
			modelWrapper.getData().setRownum(randomInt);
			modelWrapper.getData().setNewEntry(true);
			if(listPerfilAplicacionSubCrud == null){
				listPerfilAplicacionSubCrud = new ArrayList<PerfilAplicacionSubCrud>();
			}
			listPerfilAplicacionSubCrud.add(modelWrapper.getData());	
			//session.setAttribute("listPerfilAplicacionSubCrud",listPerfilAplicacionSubCrud);
	
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/updatePerfilAplicacionSubCrud")
	public @ResponseBody Map<String,? extends Object> updatePerfilAplicacionSubCrud(@RequestBody ModelWrapper<PerfilAplicacionSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud = (List<PerfilAplicacionSubCrud>) session.getAttribute("listPerfilAplicacionSubCrud");
			PerfilAplicacionSubCrud perfilAplicacionSubCrud = (PerfilAplicacionSubCrud) this.find(listPerfilAplicacionSubCrud, modelWrapper.getData());
			modelWrapper.getData().setUpdatedRecord(true);
			if(perfilAplicacionSubCrud != null){
	        	listPerfilAplicacionSubCrud.set(listPerfilAplicacionSubCrud.indexOf(perfilAplicacionSubCrud), modelWrapper.getData());
			}
			//session.setAttribute("listPerfilAplicacionSubCrud",listPerfilAplicacionSubCrud);
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/destroyPerfilAplicacionSubCrud")
	public @ResponseBody Map<String,? extends Object> destroyPerfilAplicacionSubCrud(@RequestBody ModelWrapper<PerfilAplicacionSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud = (List<PerfilAplicacionSubCrud>) session.getAttribute("listPerfilAplicacionSubCrud");
			PerfilAplicacionSubCrud perfilAplicacionSubCrud = (PerfilAplicacionSubCrud) this.find(listPerfilAplicacionSubCrud, modelWrapper.getData());
			modelWrapper.getData().setRemovedRecord(true);
			if(perfilAplicacionSubCrud != null){
	        	listPerfilAplicacionSubCrud.set(listPerfilAplicacionSubCrud.indexOf(perfilAplicacionSubCrud), modelWrapper.getData());
			}		
			//session.setAttribute("listPerfilAplicacionSubCrud",listPerfilAplicacionSubCrud);
	        return JsonReturnUtil.success();
	        
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
}