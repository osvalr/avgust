/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by GeneratorCrud v.1.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   26/02/2016 19:52:17
*/

package pe.com.acme.seguridad.web.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import pe.com.acme.util.web.ControllerHelper;
import pe.com.acme.util.JsonReturnUtil;
import pe.com.acme.util.ModelWrapper;

import pe.com.acme.seguridad.business.service.GestionarUsuarioService;
import pe.com.acme.query.mybatis.model.UsuarioCrud;
import pe.com.acme.query.mybatis.model.UsuarioCrudCriteria;

import pe.com.acme.query.mybatis.model.UsuarioPerfilSubCrud;
import pe.com.acme.query.mybatis.mapper.UsuarioPerfilSubCrudMapper;

@Controller
@RequestMapping("/GestionarUsuario")
public class GestionarUsuarioController extends ControllerHelper{

    private static Logger log = Logger.getLogger(GestionarUsuarioController.class);

	@Autowired
	private GestionarUsuarioService gestionarUsuarioService;

	@RequestMapping(value="/list")
	public @ResponseBody Map<String,? extends Object> list(HttpServletRequest request) {
		try{
			UsuarioCrudCriteria usuarioCrudCriteria = this.loadCriteria(request, UsuarioCrudCriteria.class);
            List<UsuarioCrud> listUsuarioCrud = gestionarUsuarioService.list(usuarioCrudCriteria);
			int count = gestionarUsuarioService.countRecords(usuarioCrudCriteria);
			return JsonReturnUtil.success(listUsuarioCrud,count);
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/create")
	public @ResponseBody Map<String,? extends Object> create(@RequestBody ModelWrapper<UsuarioCrud> modelWrapper, HttpSession session) {
		try{
		
            List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud = (List<UsuarioPerfilSubCrud>) session.getAttribute("listUsuarioPerfilSubCrud");
            modelWrapper.getData().setListUsuarioPerfilSubCrud(listUsuarioPerfilSubCrud);
            gestionarUsuarioService.create(modelWrapper.getData());
            session.setAttribute("listUsuarioPerfilSubCrud",null);
            return JsonReturnUtil.success(modelWrapper.getData().getId_usuario());

		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/update")
	public @ResponseBody Map<String,? extends Object> update(@RequestBody ModelWrapper<UsuarioCrud> modelWrapper, HttpSession session) throws Exception {
		try{
			List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud = (List<UsuarioPerfilSubCrud>) session.getAttribute("listUsuarioPerfilSubCrud");
            modelWrapper.getData().setListUsuarioPerfilSubCrud(listUsuarioPerfilSubCrud);
                        
			gestionarUsuarioService.update(modelWrapper.getData());
			session.setAttribute("listUsuarioPerfilSubCrud",null);
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="/destroy")
	public @ResponseBody Map<String,? extends Object> destroy(@RequestBody ModelWrapper<UsuarioCrud> modelWrapper, HttpSession session) {
		try{
			Map<String, Object> paramMap = null;
			paramMap = this.getParamMap();
			paramMap.put("id_usuario", modelWrapper.getData().getId_usuario());
			List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud = this.gestionarUsuarioService.selectByQuery(UsuarioPerfilSubCrudMapper.class, paramMap);
			modelWrapper.getData().setListUsuarioPerfilSubCrud(listUsuarioPerfilSubCrud);
			gestionarUsuarioService.destroy(modelWrapper.getData());
			session.setAttribute("listUsuarioPerfilSubCrud",null);
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/listUsuarioPerfilSubCrud")
	public @ResponseBody Map<String,? extends Object> listUsuarioPerfilSubCrud(Integer id_usuario, int start, int limit, HttpSession session) throws Exception {
		try{
		
			List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud;
			List<UsuarioPerfilSubCrud> subListUsuarioPerfilSubCrud;
	
			if(id_usuario == null){
				listUsuarioPerfilSubCrud = (List<UsuarioPerfilSubCrud>) session.getAttribute("listUsuarioPerfilSubCrud");
			}else if(id_usuario.equals(-1)){
				listUsuarioPerfilSubCrud = new ArrayList<UsuarioPerfilSubCrud>();
			}else{
				Map<String, Object> paramMap = this.getParamMap();
				paramMap.put("id_usuario", id_usuario);
				listUsuarioPerfilSubCrud = this.gestionarUsuarioService.selectByQuery(UsuarioPerfilSubCrudMapper.class, paramMap);
				this.setRandomId(listUsuarioPerfilSubCrud);
			}
	
			if(listUsuarioPerfilSubCrud == null){
				listUsuarioPerfilSubCrud = new ArrayList<UsuarioPerfilSubCrud>();
			}
			session.setAttribute("listUsuarioPerfilSubCrud",listUsuarioPerfilSubCrud);
			int size = listUsuarioPerfilSubCrud.size();
			subListUsuarioPerfilSubCrud = (List<UsuarioPerfilSubCrud>) this.getSubList(listUsuarioPerfilSubCrud, start, limit);
			return JsonReturnUtil.success(subListUsuarioPerfilSubCrud,size);
			
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/createUsuarioPerfilSubCrud")
	public @ResponseBody Map<String,? extends Object> createUsuarioPerfilSubCrud(@RequestBody ModelWrapper<UsuarioPerfilSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud = (List<UsuarioPerfilSubCrud>) session.getAttribute("listUsuarioPerfilSubCrud");
			int randomInt = this.getNegativeIdRandom();
			modelWrapper.getData().setRownum(randomInt);
			modelWrapper.getData().setNewEntry(true);
			if(listUsuarioPerfilSubCrud == null){
				listUsuarioPerfilSubCrud = new ArrayList<UsuarioPerfilSubCrud>();
			}
			listUsuarioPerfilSubCrud.add(modelWrapper.getData());	
			//session.setAttribute("listUsuarioPerfilSubCrud",listUsuarioPerfilSubCrud);
	
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/updateUsuarioPerfilSubCrud")
	public @ResponseBody Map<String,? extends Object> updateUsuarioPerfilSubCrud(@RequestBody ModelWrapper<UsuarioPerfilSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud = (List<UsuarioPerfilSubCrud>) session.getAttribute("listUsuarioPerfilSubCrud");
			UsuarioPerfilSubCrud usuarioPerfilSubCrud = (UsuarioPerfilSubCrud) this.find(listUsuarioPerfilSubCrud, modelWrapper.getData());
			modelWrapper.getData().setUpdatedRecord(true);
			if(usuarioPerfilSubCrud != null){
	        	listUsuarioPerfilSubCrud.set(listUsuarioPerfilSubCrud.indexOf(usuarioPerfilSubCrud), modelWrapper.getData());
			}
			//session.setAttribute("listUsuarioPerfilSubCrud",listUsuarioPerfilSubCrud);
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/destroyUsuarioPerfilSubCrud")
	public @ResponseBody Map<String,? extends Object> destroyUsuarioPerfilSubCrud(@RequestBody ModelWrapper<UsuarioPerfilSubCrud> modelWrapper, HttpSession session) {
		try{
		
			List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud = (List<UsuarioPerfilSubCrud>) session.getAttribute("listUsuarioPerfilSubCrud");
			UsuarioPerfilSubCrud usuarioPerfilSubCrud = (UsuarioPerfilSubCrud) this.find(listUsuarioPerfilSubCrud, modelWrapper.getData());
			modelWrapper.getData().setRemovedRecord(true);
			if(usuarioPerfilSubCrud != null){
	        	listUsuarioPerfilSubCrud.set(listUsuarioPerfilSubCrud.indexOf(usuarioPerfilSubCrud), modelWrapper.getData());
			}		
			//session.setAttribute("listUsuarioPerfilSubCrud",listUsuarioPerfilSubCrud);
	        return JsonReturnUtil.success();
	        
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
}