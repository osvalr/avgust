/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   26/02/2016 19:52:17
*/

package pe.com.acme.seguridad.business.implement;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

import pe.com.acme.seguridad.business.service.GestionarUsuarioService;
import pe.com.acme.query.mybatis.model.UsuarioCrud;
import pe.com.acme.query.mybatis.model.UsuarioCrudCriteria;
import pe.com.acme.query.mybatis.mapper.UsuarioCrudMapper;

import pe.com.acme.domain.mybatis.model.Usuario;
import pe.com.acme.domain.mybatis.mapper.UsuarioMapper;

import pe.com.acme.query.mybatis.model.UsuarioPerfilSubCrud;
import pe.com.acme.domain.mybatis.model.UsuarioPerfil;
import pe.com.acme.domain.mybatis.mapper.UsuarioPerfilMapper;

@Service
public class GestionarUsuarioServiceImpl extends MybatisRepositoryHelper implements GestionarUsuarioService {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(UsuarioCrud model) throws Exception {
		
		Integer lastId = null;

		Usuario usuario = dtoUtil.copyBean(model, Usuario.class);
		this.insertSelective(UsuarioMapper.class, usuario);
		
        this.insertNewRecordsUsuarioPerfilSubCrud(model.getListUsuarioPerfilSubCrud(), usuario.getId_usuario());
		lastId = usuario.getId_usuario();
		return lastId;

	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(UsuarioCrud model) throws Exception {
	
		Usuario usuario = dtoUtil.copyBean(model, Usuario.class);
		this.updateByPrimaryKeySelective(UsuarioMapper.class, usuario);
		
        this.insertNewRecordsUsuarioPerfilSubCrud(model.getListUsuarioPerfilSubCrud(), usuario.getId_usuario());
        this.updateModifiedRecordsUsuarioPerfilSubCrud(model.getListUsuarioPerfilSubCrud());
        this.removeRecordsUsuarioPerfilSubCrud(model.getListUsuarioPerfilSubCrud(), true);
		
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(UsuarioCrud model) throws Exception {
	
        this.removeRecordsUsuarioPerfilSubCrud(model.getListUsuarioPerfilSubCrud(), false);

		Usuario usuario = dtoUtil.copyBean(model, Usuario.class);
		this.deleteByPrimaryKey(UsuarioMapper.class, usuario);
	}

	@Override
	public List<UsuarioCrud> list(UsuarioCrudCriteria criteria) throws Exception {
		List<UsuarioCrud> list = this.selectByQuery(UsuarioCrudMapper.class, criteria);
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(UsuarioCrudCriteria criteria) throws Exception {
		int count = this.selectCountByQuery(UsuarioCrudMapper.class, criteria);
		return count;
	}

    @Transactional(rollbackForClassName = {"Exception"})
    private void insertNewRecordsUsuarioPerfilSubCrud(List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud, Integer id) throws Exception{

        for(UsuarioPerfilSubCrud usuarioPerfilSubCrud : listUsuarioPerfilSubCrud){

            if(usuarioPerfilSubCrud.isNewEntry()){
                usuarioPerfilSubCrud.setId_usuario(id);
                UsuarioPerfil usuarioPerfil = dtoUtil.copyBean(usuarioPerfilSubCrud, UsuarioPerfil.class);                
                this.insertSelective(UsuarioPerfilMapper.class, usuarioPerfil);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void updateModifiedRecordsUsuarioPerfilSubCrud(List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud) throws Exception{

        for(UsuarioPerfilSubCrud usuarioPerfilSubCrud : listUsuarioPerfilSubCrud){

            if(usuarioPerfilSubCrud.isUpdatedRecord()){
            	UsuarioPerfil usuarioPerfil = dtoUtil.copyBean(usuarioPerfilSubCrud, UsuarioPerfil.class);
            	this.updateByPrimaryKeySelective(UsuarioPerfilMapper.class, usuarioPerfil);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void removeRecordsUsuarioPerfilSubCrud(List<UsuarioPerfilSubCrud> listUsuarioPerfilSubCrud, boolean onlyFlag) throws Exception{

    	for(UsuarioPerfilSubCrud usuarioPerfilSubCrud : listUsuarioPerfilSubCrud){

            if(onlyFlag){
                if(usuarioPerfilSubCrud.isRemovedRecord()){
                    UsuarioPerfil usuarioPerfil = dtoUtil.copyBean(usuarioPerfilSubCrud, UsuarioPerfil.class);
                    this.deleteByPrimaryKey(UsuarioPerfilMapper.class, usuarioPerfil);
                }
            }else{
            	UsuarioPerfil usuarioPerfil = dtoUtil.copyBean(usuarioPerfilSubCrud, UsuarioPerfil.class);
                this.deleteByPrimaryKey(UsuarioPerfilMapper.class, usuarioPerfil);
            }

        }

    }	
}
