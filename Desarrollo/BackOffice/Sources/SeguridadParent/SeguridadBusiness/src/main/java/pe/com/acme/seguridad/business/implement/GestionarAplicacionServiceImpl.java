/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   26/02/2016 20:07:02
*/

package pe.com.acme.seguridad.business.implement;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

import pe.com.acme.seguridad.business.service.GestionarAplicacionService;
import pe.com.acme.query.mybatis.model.AplicacionCrud;
import pe.com.acme.query.mybatis.model.AplicacionCrudCriteria;
import pe.com.acme.query.mybatis.mapper.AplicacionCrudMapper;

import pe.com.acme.domain.mybatis.model.Aplicacion;
import pe.com.acme.domain.mybatis.mapper.AplicacionMapper;

import pe.com.acme.query.mybatis.model.PerfilAplicacionSubCrud;
import pe.com.acme.domain.mybatis.model.PerfilAplicacion;
import pe.com.acme.domain.mybatis.mapper.PerfilAplicacionMapper;

@Service
public class GestionarAplicacionServiceImpl extends MybatisRepositoryHelper implements GestionarAplicacionService {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(AplicacionCrud model) throws Exception {
		
		Integer lastId = null;

		Aplicacion aplicacion = dtoUtil.copyBean(model, Aplicacion.class);
		this.insertSelective(AplicacionMapper.class, aplicacion);
		
        this.insertNewRecordsPerfilAplicacionSubCrud(model.getListPerfilAplicacionSubCrud(), aplicacion.getId_aplicacion());
		lastId = aplicacion.getId_aplicacion();
		return lastId;

	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(AplicacionCrud model) throws Exception {
	
		Aplicacion aplicacion = dtoUtil.copyBean(model, Aplicacion.class);
		this.updateByPrimaryKeySelective(AplicacionMapper.class, aplicacion);
		
        this.insertNewRecordsPerfilAplicacionSubCrud(model.getListPerfilAplicacionSubCrud(), aplicacion.getId_aplicacion());
        this.updateModifiedRecordsPerfilAplicacionSubCrud(model.getListPerfilAplicacionSubCrud());
        this.removeRecordsPerfilAplicacionSubCrud(model.getListPerfilAplicacionSubCrud(), true);
		
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(AplicacionCrud model) throws Exception {
	
        this.removeRecordsPerfilAplicacionSubCrud(model.getListPerfilAplicacionSubCrud(), false);

		Aplicacion aplicacion = dtoUtil.copyBean(model, Aplicacion.class);
		this.deleteByPrimaryKey(AplicacionMapper.class, aplicacion);
	}

	@Override
	public List<AplicacionCrud> list(AplicacionCrudCriteria criteria) throws Exception {
		List<AplicacionCrud> list = this.selectByQuery(AplicacionCrudMapper.class, criteria);
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(AplicacionCrudCriteria criteria) throws Exception {
		int count = this.selectCountByQuery(AplicacionCrudMapper.class, criteria);
		return count;
	}

    @Transactional(rollbackForClassName = {"Exception"})
    private void insertNewRecordsPerfilAplicacionSubCrud(List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud, Integer id) throws Exception{

        for(PerfilAplicacionSubCrud perfilAplicacionSubCrud : listPerfilAplicacionSubCrud){

            if(perfilAplicacionSubCrud.isNewEntry()){
                perfilAplicacionSubCrud.setId_aplicacion(id);
                PerfilAplicacion perfilAplicacion = dtoUtil.copyBean(perfilAplicacionSubCrud, PerfilAplicacion.class);                
                this.insertSelective(PerfilAplicacionMapper.class, perfilAplicacion);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void updateModifiedRecordsPerfilAplicacionSubCrud(List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud) throws Exception{

        for(PerfilAplicacionSubCrud perfilAplicacionSubCrud : listPerfilAplicacionSubCrud){

            if(perfilAplicacionSubCrud.isUpdatedRecord()){
            	PerfilAplicacion perfilAplicacion = dtoUtil.copyBean(perfilAplicacionSubCrud, PerfilAplicacion.class);
            	this.updateByPrimaryKeySelective(PerfilAplicacionMapper.class, perfilAplicacion);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void removeRecordsPerfilAplicacionSubCrud(List<PerfilAplicacionSubCrud> listPerfilAplicacionSubCrud, boolean onlyFlag) throws Exception{

    	for(PerfilAplicacionSubCrud perfilAplicacionSubCrud : listPerfilAplicacionSubCrud){

            if(onlyFlag){
                if(perfilAplicacionSubCrud.isRemovedRecord()){
                    PerfilAplicacion perfilAplicacion = dtoUtil.copyBean(perfilAplicacionSubCrud, PerfilAplicacion.class);
                    this.deleteByPrimaryKey(PerfilAplicacionMapper.class, perfilAplicacion);
                }
            }else{
            	PerfilAplicacion perfilAplicacion = dtoUtil.copyBean(perfilAplicacionSubCrud, PerfilAplicacion.class);
                this.deleteByPrimaryKey(PerfilAplicacionMapper.class, perfilAplicacion);
            }

        }

    }	
}
