/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   26/02/2016 21:13:26
*/

package pe.com.acme.seguridad.business.implement;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

import pe.com.acme.seguridad.business.service.GestionarFuncionalidadService;
import pe.com.acme.query.mybatis.model.FuncionalidadCrud;
import pe.com.acme.query.mybatis.model.FuncionalidadCrudCriteria;
import pe.com.acme.query.mybatis.mapper.FuncionalidadCrudMapper;

import pe.com.acme.domain.mybatis.model.Funcionalidad;
import pe.com.acme.domain.mybatis.mapper.FuncionalidadMapper;

import pe.com.acme.query.mybatis.model.FuncionalidadRolSubCrud;
import pe.com.acme.domain.mybatis.model.FuncionalidadRol;
import pe.com.acme.domain.mybatis.mapper.FuncionalidadRolMapper;

@Service
public class GestionarFuncionalidadServiceImpl extends MybatisRepositoryHelper implements GestionarFuncionalidadService {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(FuncionalidadCrud model) throws Exception {
		
		Integer lastId = null;

		Funcionalidad funcionalidad = dtoUtil.copyBean(model, Funcionalidad.class);
		this.insertSelective(FuncionalidadMapper.class, funcionalidad);
		
        this.insertNewRecordsFuncionalidadRolSubCrud(model.getListFuncionalidadRolSubCrud(), funcionalidad.getId_funcionalidad());
		lastId = funcionalidad.getId_funcionalidad();
		return lastId;

	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(FuncionalidadCrud model) throws Exception {
	
		Funcionalidad funcionalidad = dtoUtil.copyBean(model, Funcionalidad.class);
		this.updateByPrimaryKeySelective(FuncionalidadMapper.class, funcionalidad);
		
        this.insertNewRecordsFuncionalidadRolSubCrud(model.getListFuncionalidadRolSubCrud(), funcionalidad.getId_funcionalidad());
        this.updateModifiedRecordsFuncionalidadRolSubCrud(model.getListFuncionalidadRolSubCrud());
        this.removeRecordsFuncionalidadRolSubCrud(model.getListFuncionalidadRolSubCrud(), true);
		
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(FuncionalidadCrud model) throws Exception {
	
        this.removeRecordsFuncionalidadRolSubCrud(model.getListFuncionalidadRolSubCrud(), false);

		Funcionalidad funcionalidad = dtoUtil.copyBean(model, Funcionalidad.class);
		this.deleteByPrimaryKey(FuncionalidadMapper.class, funcionalidad);
	}

	@Override
	public List<FuncionalidadCrud> list(FuncionalidadCrudCriteria criteria) throws Exception {
		List<FuncionalidadCrud> list = this.selectByQuery(FuncionalidadCrudMapper.class, criteria);
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(FuncionalidadCrudCriteria criteria) throws Exception {
		int count = this.selectCountByQuery(FuncionalidadCrudMapper.class, criteria);
		return count;
	}

    @Transactional(rollbackForClassName = {"Exception"})
    private void insertNewRecordsFuncionalidadRolSubCrud(List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud, Integer id) throws Exception{

        for(FuncionalidadRolSubCrud funcionalidadRolSubCrud : listFuncionalidadRolSubCrud){

            if(funcionalidadRolSubCrud.isNewEntry()){
                funcionalidadRolSubCrud.setId_funcionalidad(id);
                FuncionalidadRol funcionalidadRol = dtoUtil.copyBean(funcionalidadRolSubCrud, FuncionalidadRol.class);                
                this.insertSelective(FuncionalidadRolMapper.class, funcionalidadRol);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void updateModifiedRecordsFuncionalidadRolSubCrud(List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud) throws Exception{

        for(FuncionalidadRolSubCrud funcionalidadRolSubCrud : listFuncionalidadRolSubCrud){

            if(funcionalidadRolSubCrud.isUpdatedRecord()){
            	FuncionalidadRol funcionalidadRol = dtoUtil.copyBean(funcionalidadRolSubCrud, FuncionalidadRol.class);
            	this.updateByPrimaryKeySelective(FuncionalidadRolMapper.class, funcionalidadRol);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void removeRecordsFuncionalidadRolSubCrud(List<FuncionalidadRolSubCrud> listFuncionalidadRolSubCrud, boolean onlyFlag) throws Exception{

    	for(FuncionalidadRolSubCrud funcionalidadRolSubCrud : listFuncionalidadRolSubCrud){

            if(onlyFlag){
                if(funcionalidadRolSubCrud.isRemovedRecord()){
                    FuncionalidadRol funcionalidadRol = dtoUtil.copyBean(funcionalidadRolSubCrud, FuncionalidadRol.class);
                    this.deleteByPrimaryKey(FuncionalidadRolMapper.class, funcionalidadRol);
                }
            }else{
            	FuncionalidadRol funcionalidadRol = dtoUtil.copyBean(funcionalidadRolSubCrud, FuncionalidadRol.class);
                this.deleteByPrimaryKey(FuncionalidadRolMapper.class, funcionalidadRol);
            }

        }

    }	
}
