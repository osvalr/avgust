/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   25/02/2016 20:09:25
*/

package pe.com.acme.seguridad.business.implement;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

import pe.com.acme.seguridad.business.service.GestionarCatalogoService;
import pe.com.acme.query.mybatis.model.CatalogoQuery;
import pe.com.acme.query.mybatis.model.CatalogoQueryCriteria;
import pe.com.acme.query.mybatis.mapper.CatalogoQueryMapper;

import pe.com.acme.domain.mybatis.model.Catalogo;
import pe.com.acme.domain.mybatis.mapper.CatalogoMapper;

import pe.com.acme.query.mybatis.model.CatalogoItemQuery;
import pe.com.acme.domain.mybatis.model.CatalogoItem;
import pe.com.acme.domain.mybatis.mapper.CatalogoItemMapper;

@Service
public class GestionarCatalogoServiceImpl extends MybatisRepositoryHelper implements GestionarCatalogoService {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(CatalogoQuery model) throws Exception {
		
		Integer lastId = null;

		Catalogo catalogo = dtoUtil.copyBean(model, Catalogo.class);
		this.insertSelective(CatalogoMapper.class, catalogo);
		
        this.insertNewRecordsCatalogoItemQuery(model.getListCatalogoItemQuery(), catalogo.getId_catalogo());
		lastId = catalogo.getId_catalogo();
		return lastId;

	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(CatalogoQuery model) throws Exception {
	
		Catalogo catalogo = dtoUtil.copyBean(model, Catalogo.class);
		this.updateByPrimaryKeySelective(CatalogoMapper.class, catalogo);
		
        this.insertNewRecordsCatalogoItemQuery(model.getListCatalogoItemQuery(), catalogo.getId_catalogo());
        this.updateModifiedRecordsCatalogoItemQuery(model.getListCatalogoItemQuery());
        this.removeRecordsCatalogoItemQuery(model.getListCatalogoItemQuery(), true);
		
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(CatalogoQuery model) throws Exception {
	
        this.removeRecordsCatalogoItemQuery(model.getListCatalogoItemQuery(), false);

		Catalogo catalogo = dtoUtil.copyBean(model, Catalogo.class);
		this.deleteByPrimaryKey(CatalogoMapper.class, catalogo);
	}

	@Override
	public List<CatalogoQuery> list(CatalogoQueryCriteria criteria) throws Exception {
		List<CatalogoQuery> list = this.selectByQuery(CatalogoQueryMapper.class, criteria);
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(CatalogoQueryCriteria criteria) throws Exception {
		int count = this.selectCountByQuery(CatalogoQueryMapper.class, criteria);
		return count;
	}

    @Transactional(rollbackForClassName = {"Exception"})
    private void insertNewRecordsCatalogoItemQuery(List<CatalogoItemQuery> listCatalogoItemQuery, Integer id) throws Exception{

        for(CatalogoItemQuery catalogoItemQuery : listCatalogoItemQuery){

            if(catalogoItemQuery.isNewEntry()){
                catalogoItemQuery.setId_catalogo(id);
                CatalogoItem catalogoItem = dtoUtil.copyBean(catalogoItemQuery, CatalogoItem.class);                
                this.insertSelective(CatalogoItemMapper.class, catalogoItem);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void updateModifiedRecordsCatalogoItemQuery(List<CatalogoItemQuery> listCatalogoItemQuery) throws Exception{

        for(CatalogoItemQuery catalogoItemQuery : listCatalogoItemQuery){

            if(catalogoItemQuery.isUpdatedRecord()){
            	CatalogoItem catalogoItem = dtoUtil.copyBean(catalogoItemQuery, CatalogoItem.class);
            	this.updateByPrimaryKeySelective(CatalogoItemMapper.class, catalogoItem);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void removeRecordsCatalogoItemQuery(List<CatalogoItemQuery> listCatalogoItemQuery, boolean onlyFlag) throws Exception{

    	for(CatalogoItemQuery catalogoItemQuery : listCatalogoItemQuery){

            if(onlyFlag){
                if(catalogoItemQuery.isRemovedRecord()){
                    CatalogoItem catalogoItem = dtoUtil.copyBean(catalogoItemQuery, CatalogoItem.class);
                    this.deleteByPrimaryKey(CatalogoItemMapper.class, catalogoItem);
                }
            }else{
            	CatalogoItem catalogoItem = dtoUtil.copyBean(catalogoItemQuery, CatalogoItem.class);
                this.deleteByPrimaryKey(CatalogoItemMapper.class, catalogoItem);
            }

        }

    }	
}
