/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   29/03/2016 21:53:08
*/

package pe.com.acme.muanker.business.implement;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pe.com.acme.domain.mybatis.mapper.MembInfoExtMapper;
import pe.com.acme.domain.mybatis.mapper.MembInfoMapper;
import pe.com.acme.domain.mybatis.mapper.MembInfoReferidoMapper;
import pe.com.acme.domain.mybatis.model.MembInfo;
import pe.com.acme.domain.mybatis.model.MembInfoExample;
import pe.com.acme.domain.mybatis.model.MembInfoExt;
import pe.com.acme.domain.mybatis.model.MembInfoReferido;
import pe.com.acme.muanker.business.service.MttoMembInfoService;
import pe.com.acme.query.mybatis.mapper.MembInfoQueryMapper;
import pe.com.acme.query.mybatis.model.MembInfoQuery;
import pe.com.acme.query.mybatis.model.MembInfoQueryCriteria;
import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

@Service
public class MttoMembInfoServiceImpl extends MybatisRepositoryHelper implements MttoMembInfoService {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(MembInfoQuery model) throws Exception {
	
		Integer lastId = null;
		
		MembInfo membInfo = dtoUtil.copyBean(model, MembInfo.class);
		
		if(this.buscarPorUsuario(membInfo.getMemb___id(), null) != null){
			throw new Exception("Already exists in the account name.");
		}
		
		if(this.buscarPorCorreo(membInfo.getMail_addr(), null) != null){
			throw new Exception("Mail already exists.");
		}
		
		if(model.getMemb___id_referido() != null){
			if(this.buscarUsuario(model.getMemb___id_referido()) == null){
				throw new Exception("Reference account does not exist.");
			}
		}
		
		membInfo.setSno__numb("111111111111");
		membInfo.setBloc_code("0");
		membInfo.setCtl1_code("0");
		
		if(model.getMemb_name() == null){
			membInfo.setMemb_name(membInfo.getMemb___id());
		}
		
		this.insertSelective(MembInfoMapper.class, membInfo);
		
		MembInfoExt membInfoExt = dtoUtil.copyBean(model, MembInfoExt.class);
		membInfoExt.setMemb_guid(membInfo.getMemb_guid());
		membInfoExt.setFecha_registro(new Date());
		this.insertSelective(MembInfoExtMapper.class, membInfoExt);
		
		if(model.getMemb___id_referido() != null){
			MembInfoReferido membInfoReferido = new MembInfoReferido();
			membInfoReferido.setMemb___id_referido(model.getMemb___id_referido());
			membInfoReferido.setMemb___id(model.getMemb___id());
			membInfoReferido.setFecha_registro(new Date());
			this.insertSelective(MembInfoReferidoMapper.class, membInfoReferido);
		}
		
		lastId = membInfo.getMemb_guid();
		return lastId;
	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(MembInfoQuery model) throws Exception {

		MembInfo membInfo = dtoUtil.copyBean(model, MembInfo.class);
		this.updateByPrimaryKeySelective(MembInfoMapper.class, membInfo);
		
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(MembInfoQuery model) throws Exception {

		MembInfo membInfo = dtoUtil.copyBean(model, MembInfo.class);
		this.deleteByPrimaryKey(MembInfoMapper.class, membInfo);
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public List<MembInfoQuery> list(MembInfoQueryCriteria criteria) throws Exception {
		List<MembInfoQuery> list = this.selectByQuery(MembInfoQueryMapper.class, criteria,criteria.getStart(), criteria.getLimit());
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(MembInfoQueryCriteria criteria) throws Exception {
		int count = this.selectCountByQuery(MembInfoQueryMapper.class, criteria);
		return count;
	}
	
	public MembInfo buscarPorUsuario(String usuario, Integer id) throws Exception{
		
		MembInfoExample example = new MembInfoExample();
		
		if(id != null){
			example.createCriteria().andMemb___idEqualTo(usuario).andMemb_guidNotEqualTo(id);
		}else{
			example.createCriteria().andMemb___idEqualTo(usuario);
		}
		
		MembInfo membInfo = this.selectOneByExample(MembInfoMapper.class, example);
		
		return membInfo;
		
	}
	
	public MembInfo buscarPorCorreo(String correo, Integer id) throws Exception{
		
		MembInfoExample example = new MembInfoExample();
		
		if(id != null){
			example.createCriteria().andMail_addrEqualTo(correo).andMemb_guidNotEqualTo(id);
		}else{
			example.createCriteria().andMail_addrEqualTo(correo);
		}
		
		MembInfo membInfo = this.selectOneByExample(MembInfoMapper.class, example);
		
		return membInfo;
		
	}
	
	public MembInfo buscarUsuario(String usuario) throws Exception{
		
		MembInfoExample example = new MembInfoExample();
		
		example.createCriteria().andMemb___idEqualTo(usuario);
		
		MembInfo membInfo = this.selectOneByExample(MembInfoMapper.class, example);
		
		return membInfo;
		
	}
	public String nextSessionId() {
		SecureRandom random = new SecureRandom();
	    return new BigInteger(130, random).toString(18);
	 }
}
