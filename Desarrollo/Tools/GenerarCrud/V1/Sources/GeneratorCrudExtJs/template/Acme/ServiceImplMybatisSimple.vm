/*
* Copyright «©» ${anho}, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   ${datetimeCreate}
*/

package ${packageServiceImpl};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

import ${packageService}.${nameService}Service;
import ${classModel};
import ${classModel}Criteria;
import ${classMapperModel};

#foreach( $e in $entity )
import ${e.classEntity};
import ${e.classMapperEntity};
#foreach( $se in $e.subBeans )
import ${se.classEntity};
import ${se.classMapperEntity};
#end
#end

@Service
public class ${nameServiceImpl}ServiceImpl extends MybatisRepositoryHelper implements ${nameService}Service {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(${nameModel} model) throws Exception {
	
		Integer lastId = null;
#foreach( $e in $entity )

		${e.nameEntity} ${e.nameVarEntity} = dtoUtil.copyBean(model, ${e.nameEntity}.class);
		this.insertSelective(${e.nameMapperEntity}.class, ${e.nameVarEntity});
#set($nameVarEntityMain = ${e.nameVarEntity})
#set($primaryKeyGetMethodMain = ${e.primaryKeyGetMethod})
#foreach( $se in $e.subBeans )

		${se.nameEntity} ${se.nameVarEntity} = dtoUtil.copyBean(model, ${se.nameEntity}.class);
#if(!$se.joinPropertySetMethod)
		${se.nameVarEntity}.${se.primaryKeySetMethod}($nameVarEntityMain.$primaryKeyGetMethodMain());${se.otherProperties}
#else
		${se.nameVarEntity}.${se.joinPropertySetMethod}($nameVarEntityMain.${se.joinPropertyGetMethod}());${se.otherProperties}
#end
		this.insertSelective(${se.nameMapperEntity}.class, ${se.nameVarEntity});
#set($nameVarEntityMain = ${se.nameVarEntity})
#set($primaryKeyGetMethodMain = ${se.primaryKeyGetMethod})
#end
#end

		lastId = ${returnProperty}
		return lastId;
	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(${nameModel} model) throws Exception {
#foreach( $e in $entity )

		${e.nameEntity} ${e.nameVarEntity} = dtoUtil.copyBean(model, ${e.nameEntity}.class);
		this.updateByPrimaryKeySelective(${e.nameMapperEntity}.class, ${e.nameVarEntity});
		
#foreach( $se in $e.subBeans )
		${se.nameEntity} ${se.nameVarEntity} = dtoUtil.copyBean(model, ${se.nameEntity}.class);
		this.updateByPrimaryKeySelective(${se.nameMapperEntity}.class, ${se.nameVarEntity});
		
#end
#end
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(${nameModel} model) throws Exception {
#foreach( $e in $entityDelete )

		${e.nameEntity} ${e.nameVarEntity} = dtoUtil.copyBean(model, ${e.nameEntity}.class);
		this.deleteByPrimaryKey(${e.nameMapperEntity}.class, ${e.nameVarEntity});
#end
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public List<${nameModel}> list(${nameModel}Criteria criteria) throws Exception {
		List<${nameModel}> list = this.selectByQuery(${nameModel}Mapper.class, criteria);
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(${nameModel}Criteria criteria) throws Exception {
		int count = this.selectCountByQuery(${nameModel}Mapper.class, criteria);
		return count;
	}
}
