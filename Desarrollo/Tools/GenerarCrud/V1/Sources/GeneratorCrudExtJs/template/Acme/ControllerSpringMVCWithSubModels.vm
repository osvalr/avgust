/*
* Copyright «©» ${anho}, J.R Totem. All rights reserved.
*
* This file was generated by GeneratorCrud v.1.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   ${datetimeCreate}
*/

package ${packageController};

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import pe.com.acme.util.web.ControllerHelper;
import pe.com.acme.util.JsonReturnUtil;
import pe.com.acme.util.ModelWrapper;

import ${packageService}.${nameService}Service;
import ${classModel};
import ${classModel}Criteria;

#foreach( $e in $subModels )
import ${e.classModel};
import ${e.classMapperModel};
#end

@Controller
@RequestMapping("/${nameController}")
public class ${nameController}Controller extends ControllerHelper{

    private static Logger log = Logger.getLogger(${nameController}Controller.class);

	@Autowired
	private ${nameService}Service ${varNameService}Service;

	@RequestMapping(value="/list")
	public @ResponseBody Map<String,? extends Object> list(HttpServletRequest request) {
		try{
			${nameModel}Criteria ${nameVarModel}Criteria = this.loadCriteria(request, ${nameModel}Criteria.class);
            List<${nameModel}> list${nameModel} = ${varNameService}Service.list(${nameVarModel}Criteria);
			int count = ${varNameService}Service.countRecords(${nameVarModel}Criteria);
			return JsonReturnUtil.success(list${nameModel},count);
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/create")
	public @ResponseBody Map<String,? extends Object> create(@RequestBody ModelWrapper<${nameModel}> modelWrapper, HttpSession session) {
		try{
		
#foreach( $e in $subModels )
            List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("list${e.nameModel}");
            modelWrapper.getData().setList${e.nameModel}(list${e.nameModel});
#end
            ${varNameService}Service.create(modelWrapper.getData());
#foreach( $e in $subModels )
            session.setAttribute("list${e.nameModel}",null);
#end
            return JsonReturnUtil.success(modelWrapper.getData().${nameIdPropertyGetMethod}());

		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/update")
	public @ResponseBody Map<String,? extends Object> update(@RequestBody ModelWrapper<${nameModel}> modelWrapper, HttpSession session) throws Exception {
		try{
#foreach( $e in $subModels )
			List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("list${e.nameModel}");
            modelWrapper.getData().setList${e.nameModel}(list${e.nameModel});
#end
                        
			${varNameService}Service.update(modelWrapper.getData());
#foreach( $e in $subModels )
			session.setAttribute("list${e.nameModel}",null);
#end
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="/destroy")
	public @ResponseBody Map<String,? extends Object> destroy(@RequestBody ModelWrapper<${nameModel}> modelWrapper, HttpSession session) {
		try{
			Map<String, Object> paramMap = null;
#foreach( $e in $subModels )
			paramMap = this.getParamMap();
			paramMap.put("${e.joinProperty}", modelWrapper.getData().${e.joinPropertyGetMethod}());
			List<${e.nameModel}> list${e.nameModel} = this.${varNameService}Service.selectByQuery(${e.nameMapperModel}.class, paramMap);
			modelWrapper.getData().setList${e.nameModel}(list${e.nameModel});
#end
			${varNameService}Service.destroy(modelWrapper.getData());
#foreach( $e in $subModels )
			session.setAttribute("list${e.nameModel}",null);
#end
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

#foreach( $e in $subModels )
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/list${e.nameModel}")
	public @ResponseBody Map<String,? extends Object> list${e.nameModel}(Integer ${e.joinProperty}, int start, int limit, HttpSession session) throws Exception {
		try{
		
			List<${e.nameModel}> list${e.nameModel};
			List<${e.nameModel}> subList${e.nameModel};
	
			if(${e.joinProperty} == null){
				list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("list${e.nameModel}");
			}else if(${e.joinProperty}.equals(-1)){
				list${e.nameModel} = new ArrayList<${e.nameModel}>();
			}else{
				Map<String, Object> paramMap = this.getParamMap();
				paramMap.put("${e.joinProperty}", ${e.joinProperty});
				list${e.nameModel} = this.${varNameService}Service.selectByQuery(${e.nameMapperModel}.class, paramMap);
				this.setRandomId(list${e.nameModel});
			}
	
			if(list${e.nameModel} == null){
				list${e.nameModel} = new ArrayList<${e.nameModel}>();
			}
			session.setAttribute("list${e.nameModel}",list${e.nameModel});
			int size = list${e.nameModel}.size();
			subList${e.nameModel} = (List<${e.nameModel}>) this.getSubList(list${e.nameModel}, start, limit);
			return JsonReturnUtil.success(subList${e.nameModel},size);
			
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/create${e.nameModel}")
	public @ResponseBody Map<String,? extends Object> create${e.nameModel}(@RequestBody ModelWrapper<${e.nameModel}> modelWrapper, HttpSession session) {
		try{
		
			List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("list${e.nameModel}");
			int randomInt = this.getNegativeIdRandom();
			modelWrapper.getData().setRownum(randomInt);
			modelWrapper.getData().${e.propertySetMethod}(randomInt);
			modelWrapper.getData().setNewEntry(true);
			if(list${e.nameModel} == null){
				list${e.nameModel} = new ArrayList<${e.nameModel}>();
			}
			list${e.nameModel}.add(modelWrapper.getData());
	
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/update${e.nameModel}")
	public @ResponseBody Map<String,? extends Object> update${e.nameModel}(@RequestBody ModelWrapper<${e.nameModel}> modelWrapper, HttpSession session) {
		try{
		
			List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("list${e.nameModel}");
			${e.nameModel} ${e.nameVarModel} = (${e.nameModel}) this.find(list${e.nameModel}, modelWrapper.getData());
			
			if(${e.nameVarModel}.getRownum().intValue() > 0){
				modelWrapper.getData().setUpdatedRecord(true);
				modelWrapper.getData().setNewEntry(false);
				modelWrapper.getData().setRemovedRecord(false);
			}else{
				modelWrapper.getData().setNewEntry(true);
				modelWrapper.getData().setUpdatedRecord(false);
				modelWrapper.getData().setRemovedRecord(false);
			}
			
			if(${e.nameVarModel} != null){
	        	list${e.nameModel}.set(list${e.nameModel}.indexOf(${e.nameVarModel}), modelWrapper.getData());
			}
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/destroy${e.nameModel}")
	public @ResponseBody Map<String,? extends Object> destroy${e.nameModel}(@RequestBody ModelWrapper<${e.nameModel}> modelWrapper, HttpSession session) {
		try{
		
			List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("list${e.nameModel}");
			${e.nameModel} ${e.nameVarModel} = (${e.nameModel}) this.find(list${e.nameModel}, modelWrapper.getData());
			modelWrapper.getData().setRemovedRecord(true);
			if(${e.nameVarModel} != null){
			
				if(${e.nameVarModel}.getRownum().intValue() > 0){
					list${e.nameModel}.set(list${e.nameModel}.indexOf(${e.nameVarModel}), modelWrapper.getData());
				}else{
					list${e.nameModel}.remove(list${e.nameModel}.indexOf(${e.nameVarModel}));
				}
				
			}		
	        return JsonReturnUtil.success();
	        
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
#end
}