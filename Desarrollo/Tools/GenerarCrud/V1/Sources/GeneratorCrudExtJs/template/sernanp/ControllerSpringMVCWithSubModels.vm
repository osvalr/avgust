/**
* Copyright «©» ${anho}, FOCUS CONSULTORES ASOCIADOS SAC. All rights reserved.
*
* This file is part of ${nameApp}.
*
* ${nameApp} is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* ${nameApp} is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with ${nameApp}.  If not, see <http://www.gnu.org/licenses/>.
*/	 

/**
* GENERATOR CRUD EXT JS 5            
* BY FOCUS CONSULTORES ASOCIADOS SAC  
* DATE CREATE : ${datetimeCreate}
* VERSION : 1.0 
*/

package ${packageController};

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import pe.com.focus.repository.mybatis.util.BusinessException;
import pe.com.focus.util.ControllerHelper;
import pe.com.focus.util.ExtJSReturn;

import ${packageService}.${nameService}Service;
import ${classModel};
import ${classMapperModel};
import ${classModel}Wrapper;

#foreach( $e in $subModels )
import ${e.classModel};
import ${classModel}Criteria;
import ${e.classMapperModel};
import ${e.classModel}Wrapper;
#end

@Controller
@RequestMapping("${module}")
public class ${nameController}Controller extends ControllerHelper{

	@Autowired
	private ${nameService}Service ${varNameService}Service;

	@RequestMapping(value="${nameController}View.action")
	public @ResponseBody Map<String,? extends Object> view(@RequestParam int start, @RequestParam int limit, HttpServletRequest request) throws Exception {
		try{
			${nameModel}Criteria ${nameVarModel}Criteria = this.loadCriteria(request, ${nameModel}Criteria.class);
			List<${nameModel}> list${nameModel} = ${varNameService}Service.getListByQuery(${nameMapperModel}.class, ${nameVarModel}Criteria, start, limit);
			int total = ${varNameService}Service.getCountRowsByQuery(${nameMapperModel}.class, ${nameVarModel}Criteria);
			return ExtJSReturn.success(list${nameModel},total);
		} catch (BusinessException e) {
			return ExtJSReturn.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="${nameController}Create.action")
	public @ResponseBody Map<String,? extends Object> create(@RequestBody ${nameModel}Wrapper ${nameVarModel}Wrapper, HttpSession session) throws Exception {
		try{
		
#foreach( $e in $subModels )
			List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("${e.nameModel}List");
#end
			${varNameService}Service.create(${nameVarModel}Wrapper.getData(),${lists});
#foreach( $e in $subModels )
			session.setAttribute("${e.nameModel}List",null);
#end
			return ExtJSReturn.success(${nameVarModel}Wrapper.getData(), "Operation Success.");
		} catch (BusinessException e) {
			return ExtJSReturn.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="${nameController}Save.action")
	public @ResponseBody Map<String,? extends Object> save(@RequestBody ${nameModel}Wrapper ${nameVarModel}Wrapper, HttpSession session) throws Exception {
		try{
#foreach( $e in $subModels )
			List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("${e.nameModel}List");
#end
			${varNameService}Service.save(${nameVarModel}Wrapper.getData(),${lists});
#foreach( $e in $subModels )
			session.setAttribute("${e.nameModel}List",null);
#end
			return ExtJSReturn.success(${nameVarModel}Wrapper.getData(), "Operation Success.");
		} catch (BusinessException e) {
			return ExtJSReturn.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="${nameController}Remove.action")
	public @ResponseBody Map<String,? extends Object> remove(@RequestBody ${nameModel}Wrapper ${nameVarModel}Wrapper, HttpSession session) {
		try{
			Map<String, Object> paramMap = null;
#foreach( $e in $subModels )
			paramMap = this.getParamMap();
			paramMap.put("${e.joinProperty}", ${nameVarModel}Wrapper.getData().${e.joinPropertyGetMethod}());
			List<${e.nameModel}> list${e.nameModel} = this.${varNameService}Service.getListByQuery(${e.nameMapperModel}.class, paramMap);
#end
			${varNameService}Service.remove(${nameVarModel}Wrapper.getData(),${lists});
#foreach( $e in $subModels )
			session.setAttribute("${e.nameModel}List",null);
#end
			Map<String,Object> modelMap = new HashMap<String,Object>(1);
			modelMap.put("success", true);
			return modelMap;
		} catch (BusinessException e) {
			return ExtJSReturn.exception(e.getMessage());
		}
	}

#foreach( $e in $subModels )
	@SuppressWarnings("unchecked")
	@RequestMapping(value="${e.nameModelAlter}List.action")
	public @ResponseBody Map<String,? extends Object> ${e.nameModel}list(Integer ${e.joinProperty}, int start, int limit, HttpSession session) throws Exception {
		
		List<${e.nameModel}> list${e.nameModel};
		List<${e.nameModel}> subList${e.nameModel};

		if(${e.joinProperty} == null){
			list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("${e.nameModel}List");
		}else if(${e.joinProperty}.equals(-1)){
			list${e.nameModel} = new ArrayList<${e.nameModel}>();
		}else{
			Map<String, Object> paramMap = this.getParamMap();
			paramMap.put("${e.joinProperty}", ${e.joinProperty});
			list${e.nameModel} = this.${varNameService}Service.getListByQuery(${e.nameMapperModel}.class, paramMap);
		}

		if(list${e.nameModel} == null){
			list${e.nameModel} = new ArrayList<${e.nameModel}>();
		}
		session.setAttribute("${e.nameModel}List",list${e.nameModel});
		int size = list${e.nameModel}.size();
		
		subList${e.nameModel} = this.getSubList(list${e.nameModel}, start, limit);
		
		return ExtJSReturn.success(subList${e.nameModel},size);
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="${e.nameModelAlter}Add.action")
	public @ResponseBody Map<String,? extends Object> add(@RequestBody ${e.nameModel}Wrapper ${e.nameVarModel}Wrapper, HttpSession session) {
		
		List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("${e.nameModel}List");
		int randomInt = this.getNegativeIdRandom();
		${e.nameVarModel}Wrapper.getData().${e.propertySetMethod}(randomInt);
		if(list${e.nameModel} == null){
			list${e.nameModel} = new ArrayList<${e.nameModel}>();
		}
		list${e.nameModel}.add(${e.nameVarModel}Wrapper.getData());	
		session.setAttribute("${e.nameModel}List",list${e.nameModel});

		return ExtJSReturn.success(${e.nameVarModel}Wrapper.getData(), "Operation Success.");
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="${e.nameModelAlter}Update.action")
	public @ResponseBody Map<String,? extends Object> update(@RequestBody ${e.nameModel}Wrapper ${e.nameVarModel}Wrapper, HttpSession session) {
		
		List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("${e.nameModel}List");
		int index = -1;
		
		for (int i = 0; i < list${e.nameModel}.size(); i++) {
			if(list${e.nameModel}.get(i).${e.propertyGetMethod}().equals(${e.nameVarModel}Wrapper.getData().${e.propertyGetMethod}())){
				index = i;
				break;
			}
		}
		
		if(index > -1){
			list${e.nameModel}.set(index, ${e.nameVarModel}Wrapper.getData());
		}
		
		session.setAttribute("${e.nameModel}List",list${e.nameModel});

		return ExtJSReturn.success(${e.nameVarModel}Wrapper.getData(), "Operation Success.");
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="${e.nameModelAlter}Delete.action")
	public @ResponseBody Map<String,? extends Object> delete(@RequestBody ${e.nameModel}Wrapper ${e.nameVarModel}Wrapper, HttpSession session) {
		
		List<${e.nameModel}> list${e.nameModel} = (List<${e.nameModel}>) session.getAttribute("${e.nameModel}List");
		int index = -1;
		for (int i = 0; i < list${e.nameModel}.size(); i++) {
			if(list${e.nameModel}.get(i).${e.propertyGetMethod}().equals(${e.nameVarModel}Wrapper.getData().${e.propertyGetMethod}())){
				index = i;
				break;
			}
		}
		
		if(index > -1){
			list${e.nameModel}.remove(index);
		}
		
		session.setAttribute("${e.nameModel}List",list${e.nameModel});
	
		Map<String,Object> modelMap = new HashMap<String,Object>(1);
		modelMap.put("success", true);
		return modelMap;
	}
#end
}