/**
* Copyright «©» ${anho}, FOCUS CONSULTORES ASOCIADOS SAC. All rights reserved.
*
* This file is part of ${nameApp}.
*
* ${nameApp} is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* ${nameApp} is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with ${nameApp}.  If not, see <http://www.gnu.org/licenses/>.
*/	 

/**
* GENERATOR CRUD EXT JS 5            
* BY FOCUS CONSULTORES ASOCIADOS SAC  
* DATE CREATE : ${datetimeCreate}
* VERSION : 1.0 
*/

package ${packageServiceImpl};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import sernanp.app.util.BeanUtil;
import sernanp.app.util.BusinessException;
import sernanp.app.util.HelperServiceMybatisImpl;

import ${packageService}.${nameService}Service;
import ${classModel};

#foreach( $e in $entity )
import ${e.classEntity};
import ${e.classMapperEntity};
#foreach( $se in $e.subBeans )
import ${se.classEntity};
import ${se.classMapperEntity};
#end
#end

@Service
public class ${nameServiceImpl}ServiceImpl extends HelperServiceMybatisImpl implements ${nameService}Service {

	@Autowired
	private BeanUtil beanUtil;
	
	@Transactional
	@Override
	public Integer create(${nameModel} model) throws BusinessException {
	
		Integer lastId = null;
#foreach( $e in $entity )

		${e.nameEntity} ${e.nameVarEntity} = beanUtil.copyBean(model, ${e.nameEntity}.class);
		this.insertSelective(${e.nameMapperEntity}.class, ${e.nameVarEntity});
#set($nameVarEntityMain = ${e.nameVarEntity})
#set($primaryKeyGetMethodMain = ${e.primaryKeyGetMethod})
#foreach( $se in $e.subBeans )

		${se.nameEntity} ${se.nameVarEntity} = beanUtil.copyBean(model, ${se.nameEntity}.class);
#if(!$se.joinPropertySetMethod)
		${se.nameVarEntity}.${se.primaryKeySetMethod}($nameVarEntityMain.$primaryKeyGetMethodMain());${se.otherProperties}
#else
		${se.nameVarEntity}.${se.joinPropertySetMethod}($nameVarEntityMain.${se.joinPropertyGetMethod}());${se.otherProperties}
#end
		this.insertSelective(${se.nameMapperEntity}.class, ${se.nameVarEntity});
#set($nameVarEntityMain = ${se.nameVarEntity})
#set($primaryKeyGetMethodMain = ${se.primaryKeyGetMethod})
#end
#end

		lastId = ${returnProperty}
		return lastId;
	}
	
	@Transactional
	@Override
	public void save(${nameModel} model) throws BusinessException {
#foreach( $e in $entity )

		${e.nameEntity} ${e.nameVarEntity} = beanUtil.copyBean(model, ${e.nameEntity}.class);
		this.updateByPrimaryKeySelective(${e.nameMapperEntity}.class, ${e.nameVarEntity});
		
#foreach( $se in $e.subBeans )
		${se.nameEntity} ${se.nameVarEntity} = beanUtil.copyBean(model, ${se.nameEntity}.class);
		this.updateByPrimaryKeySelective(${se.nameMapperEntity}.class, ${se.nameVarEntity});
		
#end
#end
	}

	@Transactional
	@Override
	public void remove(${nameModel} model) throws BusinessException {
#foreach( $e in $entityDelete )

		${e.nameEntity} ${e.nameVarEntity} = beanUtil.copyBean(model, ${e.nameEntity}.class);
		this.deleteByPrimaryKey(${e.nameMapperEntity}.class, ${e.nameVarEntity});
#end
	}

}
