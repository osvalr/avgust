<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" > 
<mapper namespace="sernanp.app.dao.query.mapper.GestionarReqPersonalQueryMapper"> 

<sql id="outs"> 
<![CDATA[

  rp.srl_id_requerimiento_personal,
  rp.var_numero_requerimiento,
  (select a[2] || '-' || a[3] from (select regexp_split_to_array(rp.var_numero_requerimiento, '-')) as dt(a)) as "var_numero_requerimiento_corto",
  rp.idarea_solicitante,
  ao.desarea AS "descrip_area_solicitante",
  rp.idunidad_solicitante,
  uo.nomunidad AS "descrip_unidad_solicitante",
  rp.idarea_supervisora,
  ao2.desarea AS "descrip_area_supervisora",
  rp.idunidad_supervisora,
  uo2.nomunidad AS "descrip_unidad_supervisora",
  an.idareanatural,
  an.desareanatural,
  se.idsede, 	
  se.dessede,
  can.idcategoriaanp, 
  can.descategoriaanp,

  rp.int_cantidad_requerida,
  rp.dec_honorario_personal,
  rp.int_cantidad_tiempo, 
  rp.int_id_tipo_unidad_tiempo, 
  rp.var_experiencia_requerida,
  rp.var_competencias_requeridas,
  rp.var_formacion_academica,
  rp.var_cursos_especializacion,
  rp.var_requisitos_puesto,
  rp.var_principales_funciones,
  rp.int_requiere_evaluacion,
  rp.var_lugar_prestacion,
  rp.int_id_tipo_trabajador,
  vwt.destablatipo as "descrip_trabajador",
  rp.var_denominacion_requerimiento,
  rp.int_id_estado,
  vwe.destablatipo as "descrip_estado",
  rp.c_fte_fto, 
  rp.c_meta
  ,rp.int_anio
  ,am.srl_id_anio_planilla
  ,to_char(rp.tsp_fecha_registro,'DD/MM/YYYY') as "tsp_fecha_registro"
  ,rp.id_sede_ubicacion
  ,su.direccion   AS direccion_ubicacion_fisica
  ,sars.var_nomb_sede


]]>
</sql> 

<sql id="from"> 
<![CDATA[


  personal.t_requerimiento_personal rp
  LEFT JOIN sernanp.areaorganica ao ON rp.idarea_solicitante = ao.idarea
  LEFT JOIN sernanp.areaorganica ao2 ON rp.idarea_supervisora = ao2.idarea
  LEFT JOIN sernanp.unidadoperativa uo ON rp.idunidad_solicitante = uo.idunidad
  LEFT JOIN sernanp.unidadoperativa uo2 ON rp.idunidad_supervisora = uo2.idunidad
  LEFT JOIN sernanp.sede se ON ao.idsede = se.idsede
  LEFT JOIN sernanp.areanatural an ON se.idareanatural = an.idareanatural
  LEFT JOIN sernanp.categoriaanp can ON an.idcategoriaanp = can.idcategoriaanp	
  LEFT JOIN sernanp.vw_estado_generico vwe ON rp.int_id_estado = vwe.ordtablatipo
  LEFT JOIN sernanp.vw_tipo_trabajador vwt ON rp.int_id_tipo_trabajador = vwt.ordtablatipo
  LEFT join personal.t_anio_meta am on am.cod_meta = rp.c_meta and am.idarea = rp.idarea_solicitante and coalesce(am.idunidad,0) = coalesce(rp.idunidad_solicitante,coalesce(am.idunidad,0))

  LEFT JOIN sernanp.sede su ON su.idsede = rp.id_sede_ubicacion
  LEFT JOIN sernanp.t_sede_administrativa_req_sel sars ON sars.srl_id_sede_req_sel = rp.srl_id_sede_req_sel


]]>
</sql> 

<sql id="inputs"> 
<![CDATA[

  rp.srl_id_requerimiento_personal = COALESCE(#{srl_id_requerimiento_personal},rp.srl_id_requerimiento_personal) AND
  COALESCE(rp.idarea_solicitante,0) = COALESCE(#{idarea_solicitante},COALESCE(rp.idarea_solicitante,0)) AND
  COALESCE(rp.idunidad_solicitante,0) = COALESCE(#{idunidad_solicitante},COALESCE(rp.idunidad_solicitante,0)) AND
  COALESCE(rp.idarea_supervisora,0) = COALESCE(#{idarea_supervisora},COALESCE(rp.idarea_supervisora,0)) AND
  COALESCE(rp.idunidad_supervisora,0) = COALESCE(#{idunidad_supervisora},COALESCE(rp.idunidad_supervisora,0)) AND
  COALESCE(rp.int_id_estado,0) = COALESCE(#{int_id_estado},COALESCE(rp.int_id_estado,0)) AND
  COALESCE(rp.int_id_tipo_trabajador,0) = COALESCE(#{int_id_tipo_trabajador},COALESCE(rp.int_id_tipo_trabajador,0)) AND

  COALESCE(can.idcategoriaanp,0) = COALESCE(#{idcategoriaanp},can.idcategoriaanp) AND
  COALESCE(se.idsede,0) = COALESCE(#{idsede},se.idsede) AND
  COALESCE(an.idareanatural,0) = COALESCE(#{idareanatural},an.idareanatural)
  AND
 COALESCE(rp.id_sede_ubicacion, 0) = COALESCE(#{id_sede_ubicacion},COALESCE(rp.id_sede_ubicacion, 0)) AND
  COALESCE(rp.srl_id_sede_req_sel, 0) = COALESCE(#{srl_id_sede_req_sel},COALESCE(rp.srl_id_sede_req_sel, 0))
]]>
</sql> 

<sql id="order"> 
<![CDATA[
ORDER BY ${orderColumn} ${orderDirecction}
]]>
</sql> 

<select id="getListQueryByCriteria" resultType="sernanp.app.dao.query.domain.GestionarReqPersonalQuery" parameterType="sernanp.app.dao.query.domain.GestionarReqPersonalQueryCriteria"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryByMap" resultType="sernanp.app.dao.query.domain.GestionarReqPersonalQuery" parameterType="java.util.Map"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryPaginationByCriteria" resultType="sernanp.app.dao.query.domain.GestionarReqPersonalQuery" parameterType="sernanp.app.dao.query.domain.GestionarReqPersonalQueryCriteria"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryPaginationByMap" resultType="sernanp.app.dao.query.domain.GestionarReqPersonalQuery" parameterType="java.util.Map"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getCountRowsByCriteria" resultType="java.lang.Integer" parameterType="sernanp.app.dao.query.domain.GestionarReqPersonalQueryCriteria"> 
select 
count(*) 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
</select> 

<select id="getCountRowsByMap" resultType="java.lang.Integer" parameterType="java.util.Map"> 
select 
count(*) 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
</select> 

</mapper> 
