<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" > 
<mapper namespace="sernanp.app.dao.query.mapper.GestionarMetaFuenteGenericaQueryMapper"> 

<sql id="outs"> 
<![CDATA[


mfg.srl_id_meta_fuente_generica,

mfg.srl_id_anio_planilla,
ap.int_anio,

mfg.srl_id_meta_presupuestaria,
mp.var_descripcion,
mp.var_cod_meta_presupuestaria,
mfg.var_cod_meta_anio,

mfg.srl_id_fuente_financiamiento,
ff.var_rubro_fte_fto,
ff.var_descripcion_fuente_financiamiento,

gg.srl_id_generica_gasto,
gg.var_descrip_generica_gasto,

mfg.srl_id_clasificador,
cs.var_descrip_clasificador,

mfg.idarea,
ao.desarea,
mfg.idunidad,
uo.nomunidad,

mfg.int_id_estado,
eg.destablatipo as descrip_estado,
to_char(mfg.tsp_fecha_registro,'dd/mm/yyyy') as tsp_fecha_registro


]]>
</sql> 

<sql id="from"> 
<![CDATA[


mpp.t_meta_fuente_generica mfg
left join mpp.t_fuente_financiamiento ff on mfg.srl_id_fuente_financiamiento = ff.srl_id_fuente_financiamiento
left join mpp.t_meta_presupuestaria mp on mfg.srl_id_meta_presupuestaria = mp.srl_id_meta_presupuestaria
left join sernanp.areaorganica ao on mfg.idarea = ao.idarea
left join sernanp.unidadoperativa uo on mfg.idunidad = uo.idunidad
left join mpp.t_clasificador cs on mfg.srl_id_clasificador = cs.srl_id_clasificador
left join mpp.t_generica_gasto gg on cs.srl_id_generica_gasto = gg.srl_id_generica_gasto
left join personal.t_anio_planilla ap on mfg.srl_id_anio_planilla = ap.srl_id_anio_planilla
left join sernanp.vw_estado_generico eg on mfg.int_id_estado = eg.codinttablatipo


]]>
</sql> 

<sql id="inputs"> 
<![CDATA[


mfg.srl_id_meta_fuente_generica = coalesce(#{srl_id_meta_fuente_generica},mfg.srl_id_meta_fuente_generica) and 
mfg.srl_id_anio_planilla = coalesce(#{srl_id_anio_planilla},mfg.srl_id_anio_planilla) and 
mfg.srl_id_meta_presupuestaria = coalesce(#{srl_id_meta_presupuestaria},mfg.srl_id_meta_presupuestaria) and
mfg.srl_id_fuente_financiamiento = coalesce(#{srl_id_fuente_financiamiento},mfg.srl_id_fuente_financiamiento) and
gg.srl_id_generica_gasto = coalesce(#{srl_id_generica_gasto},gg.srl_id_generica_gasto) and
mfg.srl_id_clasificador = coalesce(#{srl_id_clasificador},mfg.srl_id_clasificador) and
coalesce(mfg.idarea,0) = coalesce(#{idarea},coalesce(mfg.idarea,0)) and
coalesce(mfg.idunidad,0) = coalesce(#{idunidad},coalesce(mfg.idunidad,0)) and
mfg.int_id_estado = coalesce(#{int_id_estado},mfg.int_id_estado)
]]>
</sql> 

<sql id="order"> 
<![CDATA[
ORDER BY ${orderColumn} ${orderDirecction}
]]>
</sql> 

<select id="getListQueryByCriteria" resultType="sernanp.app.dao.query.domain.GestionarMetaFuenteGenericaQuery" parameterType="sernanp.app.dao.query.domain.GestionarMetaFuenteGenericaQueryCriteria"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryByMap" resultType="sernanp.app.dao.query.domain.GestionarMetaFuenteGenericaQuery" parameterType="java.util.Map"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryPaginationByCriteria" resultType="sernanp.app.dao.query.domain.GestionarMetaFuenteGenericaQuery" parameterType="sernanp.app.dao.query.domain.GestionarMetaFuenteGenericaQueryCriteria"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryPaginationByMap" resultType="sernanp.app.dao.query.domain.GestionarMetaFuenteGenericaQuery" parameterType="java.util.Map"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getCountRowsByCriteria" resultType="java.lang.Integer" parameterType="sernanp.app.dao.query.domain.GestionarMetaFuenteGenericaQueryCriteria"> 
select 
count(*) 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
</select> 

<select id="getCountRowsByMap" resultType="java.lang.Integer" parameterType="java.util.Map"> 
select 
count(*) 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
</select> 

</mapper> 
