<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" > 
<mapper namespace="sernanp.app.dao.query.mapper.RpDetalleBoletasPersonalQueryMapper"> 

<sql id="outs"> 
<![CDATA[

	napp.idpersonal,
	 (select extract (day from (select date_trunc('month',#{fecha_mes}::date) +'1month' ::interval -'1sec' ::interval))):: INT AS dias,
	(COALESCE(pn.apepat,'')||' '||COALESCE(pn.apemat,'')||' '||COALESCE(pn.nombre,'')) as "nombre_completo",
	pn.numerodoc,
	napp.srl_id_regimen_contractual,
	rc.var_descripcion_regimen_contractual,
	ap.int_anio,
	ms.destablatipo as descrip_periodo,
	idpa.int_id_tipo_concepto,
	UPPER(vtiidp.destablatipo) as descrip_tipo_concepto,
	nc.srl_id_concepto_planilla,
	idpa.var_descrip_concepto,
	to_char(pc.dte_fec_inicio,'DD/MM/YYYY')as dte_fec_inicio,
	napp.c_fte_fto,
	napp.c_meta,
	(COALESCE(rp.var_descripcion_regimen_pensionario,'') || ' ' || COALESCE(af.var_nombre_afp,'')) as regimen_pensionario,
	ps.var_codigo_afiliacion,
	c.var_nom_cargo,
	--(CASE WHEN ca.siglascategoriaanp = 'SC'
	--           THEN ca.descategoriaanp
	--      ELSE (COALESCE(ca.siglascategoriaanp,'')|| ' ' || COALESCE(an.desareanatural,''))
	--END) as "ubicacion",
	napp.var_ubicacion_fisica as "ubicacion",
	nc.dec_monto_calculado,
	napp.dec_total_ingresos,
	napp.dec_total_descuentos,
	napp.dec_total_aportes,
	(napp.dec_total_ingresos - napp.dec_total_descuentos) neto_pagar

]]>
</sql> 

<sql id="from"> 
<![CDATA[

personal.t_nomina_anio_periodo_personal napp
inner join personal.t_anio_periodo_planilla app on napp.srl_id_anio_periodo_planilla = app.srl_id_anio_periodo_planilla
inner join personal.t_anio_planilla ap on app.srl_id_anio_planilla = ap.srl_id_anio_planilla
inner join sernanp.vw_meses ms on ms.codinttablatipo = app.int_id_periodo_mes
inner join sernanp.t_regimen_contractual rc on napp.srl_id_regimen_contractual=rc.srl_id_regimen_contractual
inner join sernanp.personal ps on napp.idpersonal = ps.idpersonal
inner join sernanp.personanatural pn on ps.idpersonanatural=pn.idpersonanatural
left join personal.t_anio_meta am on napp.c_meta = am.cod_meta and ap.srl_id_anio_planilla = am.srl_id_anio_planilla
left join sernanp.t_personal_contrato pc on napp.srl_id_contrato=pc.srl_id_contrato
left join personal.t_nomina_concepto nc ON napp.srl_id_nomina_anio_periodo_personal = nc.srl_id_nomina_anio_periodo_personal
left join personal.t_concepto_planilla idpa ON (idpa.srl_id_concepto_planilla = nc.srl_id_concepto_planilla)
left join sernanp.vw_estado_generico veg ON (nc.int_id_estado = veg.codinttablatipo)
left join sernanp.vw_concepto_planilla vtiidp ON (idpa.int_id_tipo_concepto = vtiidp.codinttablatipo)
left join sernanp.vw_sub_tipo_concepto_planilla vstiidp ON (idpa.int_id_sub_tipo_concepto = vstiidp.codinttablatipo)
LEFT JOIN sernanp.t_cargo c ON pc.srl_id_cargo = c.srl_id_cargo
LEFT JOIN sernanp.t_regimen_pensionario rp on napp.srl_id_regimen_pensionario = rp.srl_id_regimen_pensionario
LEFT JOIN personal.t_afp af on napp.srl_id_afp = af.srl_id_afp

]]>
</sql> 

<sql id="inputs"> 
<![CDATA[

UPPER(COALESCE(COALESCE(pn.nombre,'') ||' '|| COALESCE(pn.apepat,'') ||' '|| COALESCE(pn.apemat,''),'')) like UPPER(COALESCE('%'|| #{nombre_completo} ||'%',UPPER(COALESCE(COALESCE(pn.nombre,'')||' '||COALESCE(pn.apepat,'')||' '|| COALESCE(pn.apemat,''),'')))) AND
COALESCE(napp.srl_id_regimen_contractual,0)=COALESCE(#{srl_id_regimen_contractual},COALESCE(napp.srl_id_regimen_contractual,0)) and
ap.int_anio = COALESCE(#{int_anio},ap.int_anio) and
app.int_id_periodo_mes = COALESCE(#{int_id_periodo_mes},app.int_id_periodo_mes) and
napp.int_id_estado = COALESCE(1,napp.int_id_estado) and
COALESCE(idpa.int_id_tipo_concepto,0) = COALESCE(NULL,COALESCE(idpa.int_id_tipo_concepto,0))



]]>
</sql> 

<sql id="order"> 
<![CDATA[

	
ORDER BY
napp.c_fte_fto, napp.c_meta, rp.var_descripcion_regimen_pensionario, napp.var_ubicacion_fisica, pn.numerodoc, idpa.int_id_tipo_concepto

]]>
</sql> 

<select id="getListQueryByCriteria" resultType="sernanp.app.dao.query.domain.RpDetalleBoletasPersonalQuery" parameterType="sernanp.app.dao.query.domain.RpDetalleBoletasPersonalQueryCriteria"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryByMap" resultType="sernanp.app.dao.query.domain.RpDetalleBoletasPersonalQuery" parameterType="java.util.Map"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryPaginationByCriteria" resultType="sernanp.app.dao.query.domain.RpDetalleBoletasPersonalQuery" parameterType="sernanp.app.dao.query.domain.RpDetalleBoletasPersonalQueryCriteria"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryPaginationByMap" resultType="sernanp.app.dao.query.domain.RpDetalleBoletasPersonalQuery" parameterType="java.util.Map"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getCountRowsByCriteria" resultType="java.lang.Integer" parameterType="sernanp.app.dao.query.domain.RpDetalleBoletasPersonalQueryCriteria"> 
select 
count(*) 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
</select> 

<select id="getCountRowsByMap" resultType="java.lang.Integer" parameterType="java.util.Map"> 
select 
count(*) 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
</select> 

</mapper> 
