<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" > 
<mapper namespace="sernanp.app.dao.query.mapper.GestionarAsignarConceptoQueryMapper"> 

<sql id="outs"> 
<![CDATA[


p.idpersona,
pn.idpersonanatural,
ps.idpersonal,
(COALESCE(pn.apepat,'') ||' '|| COALESCE(pn.apemat,'') ||' '|| COALESCE(pn.nombre,'')) as "nombre_completo",
pn.nombre,
pn.apepat,
pn.apemat,
td.abrtablatipo as "descrip_documento",
pn.numerodoc,
pn.ruc,
to_char(pn.fechanacimiento,'dd/mm/yyyy') as fechanacimiento,

px.nompais,
gs.destablatipo descrip_genero,
p.telefono,
ps.mailpersonal correoinstitucional,
u.descrip_depto,
u.descrip_prov,
u.descrip_ubigeo,
p.direccion,

rp.srl_id_regimen_pensionario,
rp.var_descripcion_regimen_pensionario,
af.srl_id_afp,
af.var_nombre_afp,
ps.int_id_tipo_comision,
tc.destablatipo as descrip_tipo_comision,
to_char(ps.dte_fecha_afiliacion,'dd/mm/yyyy') dte_fecha_afiliacion,
ps.var_codigo_afiliacion,
ps.srl_id_entidad_bancaria,
eb.var_desc_entidad_bancaria,
ps.var_numero_cuenta_bancaria,
ps.int_estado,
--ADD 03-08-2015 DAVID
to_char(pc.dte_fec_inicio,'dd/mm/yyyy') dte_fec_inicio,
rc.var_descripcion_regimen_contractual,
-- END ADD
CASE WHEN ps.int_estado=0 THEN 'ACTIVO'
WHEN ps.int_estado=1 THEN 'INACTIVO'
END as "desc_estado"



]]>
</sql> 

<sql id="from"> 
<![CDATA[


sernanp.persona p inner join sernanp.personanatural pn on p.idpersona=pn.idpersona
inner join sernanp.personal ps on ps.idpersonanatural=pn.idpersonanatural
left join sernanp.vw_tipo_documento td on pn.idtipodocumento=td.idtablatipo
left join sernanp.t_regimen_pensionario rp on rp.srl_id_regimen_pensionario = ps.srl_id_regimen_pensionario
left join personal.t_afp af on af.srl_id_afp = ps.srl_id_afp
left join sernanp.vw_tipo_comision tc on tc.codinttablatipo = ps.int_id_tipo_comision
left join sernanp.t_entidad_bancaria eb on ps.srl_id_entidad_bancaria = eb.srl_id_entidad_bancaria
left join sernanp.pais px on p.idpais = px.idpais
left join sernanp.vw_genero_sexual gs on pn.idsexo = gs.idtablatipo
left join 
	(
				select 

				u.idubigeo, 
				d.coddpto,
				d.nombre as "descrip_depto",
				p.codprov,
				p.nombre as "descrip_prov",
				u.coddist,
				u.nombre as "descrip_ubigeo"

				from 
				sernanp.vw_departamento_ubigeo d
				inner join sernanp.vw_provincia_ubigeo p
				on d.coddpto = p.coddpto
				inner join sernanp.ubigeo u
				on p.codprov = u.codprov and u.coddpto = d.coddpto and u.coddist <> '00' and u.codprov <> '00'
	 ) u
	   on pn.idubigeo = u.idubigeo
left join sernanp.t_personal_contrato pc on ps.idpersonal=pc.idpersonal
left join sernanp.t_regimen_contractual rc on pc.srl_id_regimen_contractual=rc.srl_id_regimen_contractual


]]>
</sql> 

<sql id="inputs"> 
<![CDATA[


p.idpersona = coalesce(#{idpersona},p.idpersona) and
pn.idpersonanatural = coalesce(#{idpersonanatural},pn.idpersonanatural) and
ps.idpersonal = coalesce(#{idpersonal},ps.idpersonal) and
UPPER(COALESCE(COALESCE(pn.nombre,'')||' '||COALESCE(pn.apepat,'')||' '||COALESCE(pn.apemat,''),'')) like UPPER(COALESCE('%'||#{nombres_completos}||'%',COALESCE(COALESCE(pn.nombre,'')||' '||COALESCE(pn.apepat,'')||' '|| COALESCE(pn.apemat,''),''))) and
COALESCE(pn.idtipodocumento,0)=COALESCE(#{idtipodocumento},COALESCE(pn.idtipodocumento,0)) and
COALESCE(pn.numerodoc,'')like COALESCE('%'||#{numerodoc}||'%',COALESCE(pn.numerodoc,'')) and
COALESCE(pn.ruc,'')like COALESCE('%'||#{ruc}||'%',COALESCE(pn.ruc,'')) and
COALESCE(ps.int_estado,0)=COALESCE(#{int_estado},COALESCE(ps.int_estado,0)) and
COALESCE(pc.srl_id_regimen_contractual,0)=COALESCE(#{srl_id_regimen_contractual},COALESCE(pc.srl_id_regimen_contractual,0))and
pc.dte_fec_inicio=(select MAX(dte_fec_inicio) from sernanp.t_personal_contrato where idpersonal=pc.idpersonal)



]]>
</sql> 

<sql id="order"> 
<![CDATA[
ORDER BY ${orderColumn} ${orderDirecction}
]]>
</sql> 

<select id="getListQueryByCriteria" resultType="sernanp.app.dao.query.domain.GestionarAsignarConceptoQuery" parameterType="sernanp.app.dao.query.domain.GestionarAsignarConceptoQueryCriteria"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryByMap" resultType="sernanp.app.dao.query.domain.GestionarAsignarConceptoQuery" parameterType="java.util.Map"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryPaginationByCriteria" resultType="sernanp.app.dao.query.domain.GestionarAsignarConceptoQuery" parameterType="sernanp.app.dao.query.domain.GestionarAsignarConceptoQueryCriteria"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getListQueryPaginationByMap" resultType="sernanp.app.dao.query.domain.GestionarAsignarConceptoQuery" parameterType="java.util.Map"> 
select 
<include refid="outs" /> 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
<include refid="order" /> 
</select> 

<select id="getCountRowsByCriteria" resultType="java.lang.Integer" parameterType="sernanp.app.dao.query.domain.GestionarAsignarConceptoQueryCriteria"> 
select 
count(*) 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
</select> 

<select id="getCountRowsByMap" resultType="java.lang.Integer" parameterType="java.util.Map"> 
select 
count(*) 
from 
<include refid="from" /> 
where 
<include refid="inputs" /> 
</select> 

</mapper> 
