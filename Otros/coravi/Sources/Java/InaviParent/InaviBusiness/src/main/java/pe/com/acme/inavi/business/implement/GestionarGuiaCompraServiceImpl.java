/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   13/03/2016 16:05:57
*/

package pe.com.acme.inavi.business.implement;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pe.com.acme.domain.mybatis.mapper.GuiaMapper;
import pe.com.acme.domain.mybatis.mapper.GuiaPesoMapper;
import pe.com.acme.domain.mybatis.mapper.JornadaMapper;
import pe.com.acme.domain.mybatis.model.Guia;
import pe.com.acme.domain.mybatis.model.GuiaExample;
import pe.com.acme.domain.mybatis.model.GuiaKey;
import pe.com.acme.domain.mybatis.model.GuiaPeso;
import pe.com.acme.domain.mybatis.model.Jornada;
import pe.com.acme.domain.mybatis.model.JornadaExample;
import pe.com.acme.inavi.business.bean.MetaDataFechaBean;
import pe.com.acme.inavi.business.service.GestionarGuiaCompraService;
import pe.com.acme.inavi.business.service.GestionarJornadaService;
import pe.com.acme.inavi.business.util.InaviConstantes;
import pe.com.acme.inavi.business.util.InaviBusinessUtil;
import pe.com.acme.query.mybatis.mapper.GuiaCompraQueryMapper;
import pe.com.acme.query.mybatis.model.GuiaCompraQuery;
import pe.com.acme.query.mybatis.model.GuiaCompraQueryCriteria;
import pe.com.acme.query.mybatis.model.GuiaPesoQuery;
import pe.com.acme.query.mybatis.model.JornadaLaboralQuery;
import pe.com.acme.util.DtoUtil;
import pe.com.acme.util.MybatisRepositoryHelper;

@Service
public class GestionarGuiaCompraServiceImpl extends MybatisRepositoryHelper implements GestionarGuiaCompraService {

	@Autowired
	private DtoUtil dtoUtil;
	
	@Autowired
	private GestionarJornadaService gestionarJornadaService;
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public Integer create(GuiaCompraQuery model) throws Exception {
		
		Integer lastId = null;

		Guia guia = dtoUtil.copyBean(model, Guia.class);
		
		MetaDataFechaBean metaDataFechaBean = this.getMetaDataFecha(model.getFecha_jornada());
		
		Jornada jornada = this.getJornada(metaDataFechaBean.getNum_dia(), metaDataFechaBean.getNum_mes(), metaDataFechaBean.getNum_anio());
		
		if(jornada != null){
			if(jornada.getId_estado().intValue() == InaviConstantes.ESTADO_GENERICO_INACTIVO){
				throw new Exception("La fecha de trabajo: " + model.getFecha_jornada() + " se encuentra cerrada, no es posible agregar, modificar o eliminar guias." );
			}
		}else{
//			throw new Exception("La fecha de trabajo: " + model.getFecha_jornada() + " no existe, es necesario registrar la fecha de trabajo en el apartado de Jornadas." );
			JornadaLaboralQuery jornadaLaboralQuery = new JornadaLaboralQuery();
			jornadaLaboralQuery.setNum_anio(metaDataFechaBean.getNum_anio());
			jornadaLaboralQuery.setNum_mes(metaDataFechaBean.getNum_mes());
			jornadaLaboralQuery.setNum_dia(metaDataFechaBean.getNum_dia());
			jornadaLaboralQuery.setFecha_jornada(model.getFecha_jornada());
			gestionarJornadaService.create(jornadaLaboralQuery);
		}
		
		guia.setNum_dia(metaDataFechaBean.getNum_dia());
		guia.setNum_mes(metaDataFechaBean.getNum_mes());
		guia.setNum_anio(metaDataFechaBean.getNum_anio());
		
		guia.setId_tipo_mvto_guia(InaviConstantes.TIPO_MVTO_GUIA_COMPRA);
				
		if(guia.getId_tipo_guia().intValue() == InaviConstantes.TIPO_GUIA_COMPRA_REINGRESO){
			if(guia.getId_guia_referencia() == null){
				throw new Exception("La guia de referencia es obligatoria, para guias de tipo REINGRESO.");
			}else{
				GuiaExample guiaExample = new GuiaExample();
				guiaExample.createCriteria().
				andId_guiaEqualTo(guia.getId_guia_referencia()).
				andId_tipo_mvto_guiaEqualTo(InaviConstantes.TIPO_MVTO_GUIA_COMPRA).
				andId_tipo_guiaEqualTo(InaviConstantes.TIPO_GUIA_COMPRA_INGRESO);
				
				Guia guiaRef = this.selectOneByExample(GuiaMapper.class, guiaExample);
				
				if(guiaRef == null){
					throw new Exception("La guia de referencia no existe.");
				}
			}
		}else{
			guia.setId_guia_referencia(null);
		}
		
		this.setTotales(guia, model);

		this.insertSelective(GuiaMapper.class, guia);
		
        this.insertNewRecordsGuiaPesoQuery(model.getListGuiaPesoQuery(), guia.getId_guia());
		lastId = guia.getId_guia();
		return lastId;

	}
	
	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void update(GuiaCompraQuery model) throws Exception {
	
		GuiaKey guiaKey = new GuiaKey();
		guiaKey.setId_guia(model.getId_guia());
		Guia guia = this.selectByPrimaryKey(GuiaMapper.class, guiaKey);
		
		guia = dtoUtil.copyBean(model, Guia.class);
		
		MetaDataFechaBean metaDataFechaBean = this.getMetaDataFecha(model.getFecha_jornada());
		
		Jornada jornada = this.getJornada(metaDataFechaBean.getNum_dia(), metaDataFechaBean.getNum_mes(), metaDataFechaBean.getNum_anio());
		
		if(jornada != null){
			if(jornada.getId_estado().intValue() == InaviConstantes.ESTADO_GENERICO_INACTIVO){
				throw new Exception("La fecha de trabajo: " + model.getFecha_jornada() + " se encuentra cerrada, no es posible agregar, modificar o eliminar guias." );
			}
		}else{
			throw new Exception("La fecha de trabajo: " + model.getFecha_jornada() + " no existe, es necesario registrar la fecha de trabajo en el apartado de Jornadas." );
		}
		
		guia.setNum_dia(metaDataFechaBean.getNum_dia());
		guia.setNum_mes(metaDataFechaBean.getNum_mes());
		guia.setNum_anio(metaDataFechaBean.getNum_anio());
		
		guia.setId_tipo_mvto_guia(InaviConstantes.TIPO_MVTO_GUIA_COMPRA);
		
		if(guia.getId_tipo_guia().intValue() == InaviConstantes.TIPO_GUIA_COMPRA_REINGRESO){
			if(guia.getId_guia_referencia() == null){
				throw new Exception("La guia de referencia es obligatoria, para guias de tipo REINGRESO.");
			}else{
				GuiaExample guiaExample = new GuiaExample();
				guiaExample.createCriteria().
				andId_guiaEqualTo(guia.getId_guia_referencia()).
				andId_tipo_mvto_guiaEqualTo(InaviConstantes.TIPO_MVTO_GUIA_COMPRA).
				andId_tipo_guiaEqualTo(InaviConstantes.TIPO_GUIA_COMPRA_INGRESO);
				
				Guia guiaRef = this.selectOneByExample(GuiaMapper.class, guiaExample);
				
				if(guiaRef == null){
					throw new Exception("La guia de referencia no existe.");
				}
			}
		}else{
			guia.setId_guia_referencia(null);
		}
		
		this.setTotales(guia, model);
		
		this.updateByPrimaryKey(GuiaMapper.class, guia);
		
        this.insertNewRecordsGuiaPesoQuery(model.getListGuiaPesoQuery(), guia.getId_guia());
        this.updateModifiedRecordsGuiaPesoQuery(model.getListGuiaPesoQuery());
        this.removeRecordsGuiaPesoQuery(model.getListGuiaPesoQuery(), true);
		
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public void destroy(GuiaCompraQuery model) throws Exception {
	
		MetaDataFechaBean metaDataFechaBean = this.getMetaDataFecha(model.getFecha_jornada());
		
		Jornada jornada = this.getJornada(metaDataFechaBean.getNum_dia(), metaDataFechaBean.getNum_mes(), metaDataFechaBean.getNum_anio());

		if(jornada.getId_estado().intValue() == InaviConstantes.ESTADO_GENERICO_INACTIVO){
			throw new Exception("La fecha de trabajo: " + model.getFecha_jornada() + " se encuentra cerrada, no es posible agregar, modificar o eliminar guias." );
		}

        this.removeRecordsGuiaPesoQuery(model.getListGuiaPesoQuery(), false);

		Guia guia = dtoUtil.copyBean(model, Guia.class);
		this.deleteByPrimaryKey(GuiaMapper.class, guia);
	}

	@Override
	public List<GuiaCompraQuery> list(GuiaCompraQueryCriteria criteria) throws Exception {
		List<GuiaCompraQuery> list = this.selectByQuery(GuiaCompraQueryMapper.class, criteria, criteria.getStart(), criteria.getLimit());
		return list;
	}

	@Transactional(rollbackForClassName = {"Exception"})
	@Override
	public int countRecords(GuiaCompraQueryCriteria criteria) throws Exception {
		int count = this.selectCountByQuery(GuiaCompraQueryMapper.class, criteria);
		return count;
	}

    @Transactional(rollbackForClassName = {"Exception"})
    private void insertNewRecordsGuiaPesoQuery(List<GuiaPesoQuery> listGuiaPesoQuery, Integer id) throws Exception{

        for(GuiaPesoQuery guiaPesoQuery : listGuiaPesoQuery){

            if(guiaPesoQuery.isNewEntry()){
                guiaPesoQuery.setId_guia(id);
                GuiaPeso guiaPeso = dtoUtil.copyBean(guiaPesoQuery, GuiaPeso.class);                
                this.insertSelective(GuiaPesoMapper.class, guiaPeso);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void updateModifiedRecordsGuiaPesoQuery(List<GuiaPesoQuery> listGuiaPesoQuery) throws Exception{

        for(GuiaPesoQuery guiaPesoQuery : listGuiaPesoQuery){

            if(guiaPesoQuery.isUpdatedRecord()){
            	GuiaPeso guiaPeso = dtoUtil.copyBean(guiaPesoQuery, GuiaPeso.class);
            	this.updateByPrimaryKeySelective(GuiaPesoMapper.class, guiaPeso);
            }

        }

    }

    @Transactional(rollbackForClassName = {"Exception"})
    private void removeRecordsGuiaPesoQuery(List<GuiaPesoQuery> listGuiaPesoQuery, boolean onlyFlag) throws Exception{

    	for(GuiaPesoQuery guiaPesoQuery : listGuiaPesoQuery){

            if(onlyFlag){
                if(guiaPesoQuery.isRemovedRecord()){
                    GuiaPeso guiaPeso = dtoUtil.copyBean(guiaPesoQuery, GuiaPeso.class);
                    this.deleteByPrimaryKey(GuiaPesoMapper.class, guiaPeso);
                }
            }else{
            	GuiaPeso guiaPeso = dtoUtil.copyBean(guiaPesoQuery, GuiaPeso.class);
                this.deleteByPrimaryKey(GuiaPesoMapper.class, guiaPeso);
            }

        }

    }
    
    public int getVal(String tipo, String cod){
    	
    	String[] arr = cod.split("/");
    	
    	if(tipo.equals("d")){
    		return Integer.parseInt(arr[0]);
    	}
    	if(tipo.equals("m")){
    		return Integer.parseInt(arr[1]);
    	}
    	if(tipo.equals("y")){
    		return Integer.parseInt(arr[2]);
    	}
    	
    	return 0;
    }
    
    public double getTotalPorTipoPeso(int tipoPeso, List<GuiaPesoQuery> list){
    	
    	double total = 0;
    	
		for (GuiaPesoQuery guiaPesoQuery : list) {
			if(guiaPesoQuery.getId_tipo_peso().intValue() == tipoPeso && !guiaPesoQuery.isRemovedRecord()){
				total = total + guiaPesoQuery.getPeso_obtenido().doubleValue();
			}
		}
		
		return total;
    }
    
    public void setTotales(Guia guia, GuiaCompraQuery model){
    	
		double total_peso_bruto = 0;
		double total_peso_tara = 0;
		double total_peso_devolucion = 0;
		double total_peso_neto = 0;
		
		total_peso_bruto = this.getTotalPorTipoPeso(InaviConstantes.TIPO_PESO_BRUTO, model.getListGuiaPesoQuery());
		total_peso_tara = this.getTotalPorTipoPeso(InaviConstantes.TIPO_PESO_TARA, model.getListGuiaPesoQuery());
		total_peso_devolucion = this.getTotalPorTipoPeso(InaviConstantes.TIPO_PESO_DEVOLUCION, model.getListGuiaPesoQuery());
		
		total_peso_neto = total_peso_bruto - (total_peso_tara + total_peso_devolucion);
		
		guia.setTotal_peso_bruto(new BigDecimal(total_peso_bruto));
		guia.setTotal_peso_tara(new BigDecimal(total_peso_tara));
		guia.setTotal_peso_devolucion(new BigDecimal(total_peso_devolucion));
		guia.setTotal_peso_neto(new BigDecimal(total_peso_neto));
		
		
		if(guia.getPrecio_aplicado() != null){
			
			double importe_total = 0;
			importe_total = total_peso_neto * guia.getPrecio_aplicado().doubleValue();
			
			// Get user input
			double num = importe_total;
			long iPart = (long) num;
			double fPart = num - iPart;
			
			fPart = InaviBusinessUtil.round(fPart, 1);
			
			importe_total = iPart + fPart;
			
			guia.setTotal_importe(new BigDecimal(importe_total));
		}
    }
    
    public MetaDataFechaBean getMetaDataFecha(String fecha){
    	
    	MetaDataFechaBean bean = new MetaDataFechaBean();
    	
    	bean.setNum_dia(this.getVal("d",  fecha));
    	bean.setNum_mes(this.getVal("m",  fecha));
    	bean.setNum_anio(this.getVal("y",  fecha));
    	
    	return bean;
    }
    
    @Transactional(rollbackForClassName = {"Exception"})
    public Jornada getJornada(int num_dia, int num_mes, int num_anio) throws Exception{
    	JornadaExample example = new JornadaExample();
    	example.createCriteria().andNum_anioEqualTo(num_anio).andNum_mesEqualTo(num_mes).andNum_diaEqualTo(num_dia);
    	Jornada jornada = this.selectOneByExample(JornadaMapper.class, example);
    	return jornada;
    }
    
}
