/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by GeneratorCrud v.1.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   25/07/2016 19:41:32
*/

package pe.com.acme.inavi.ws.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import pe.com.acme.util.web.ControllerHelper;
import pe.com.acme.util.JsonReturnUtil;
import pe.com.acme.util.ModelWrapper;

import pe.com.acme.inavi.business.service.MttoCuentaPorCobrarService;
import pe.com.acme.query.mybatis.model.CuentaXCobrarQuery;
import pe.com.acme.query.mybatis.model.CuentaXCobrarQueryCriteria;

import pe.com.acme.query.mybatis.model.CuentaAmortizacionQuery;
import pe.com.acme.query.mybatis.mapper.CuentaAmortizacionQueryMapper;

@Controller
@RequestMapping("/MttoCuentaPorCobrar")
public class MttoCuentaPorCobrarController extends ControllerHelper{

    private static Logger log = Logger.getLogger(MttoCuentaPorCobrarController.class);

	@Autowired
	private MttoCuentaPorCobrarService mttoCuentaPorCobrarService;

	@RequestMapping(value="/list")
	public @ResponseBody Map<String,? extends Object> list(HttpServletRequest request) {
		try{
			CuentaXCobrarQueryCriteria cuentaXCobrarQueryCriteria = this.loadCriteria(request, CuentaXCobrarQueryCriteria.class);
            List<CuentaXCobrarQuery> listCuentaXCobrarQuery = mttoCuentaPorCobrarService.list(cuentaXCobrarQueryCriteria);
			int count = mttoCuentaPorCobrarService.countRecords(cuentaXCobrarQueryCriteria);
			return JsonReturnUtil.success(listCuentaXCobrarQuery,count);
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/create")
	public @ResponseBody Map<String,? extends Object> create(@RequestBody ModelWrapper<CuentaXCobrarQuery> modelWrapper, HttpSession session) {
		try{
		
            List<CuentaAmortizacionQuery> listCuentaAmortizacionQuery = (List<CuentaAmortizacionQuery>) session.getAttribute("listCuentaAmortizacionQuery");
            modelWrapper.getData().setListCuentaAmortizacionQuery(listCuentaAmortizacionQuery);
            mttoCuentaPorCobrarService.create(modelWrapper.getData());
            session.setAttribute("listCuentaAmortizacionQuery",null);
            return JsonReturnUtil.success(modelWrapper.getData().getId_cuenta_x_cobrar());

		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/update")
	public @ResponseBody Map<String,? extends Object> update(@RequestBody ModelWrapper<CuentaXCobrarQuery> modelWrapper, HttpSession session) throws Exception {
		try{
			List<CuentaAmortizacionQuery> listCuentaAmortizacionQuery = (List<CuentaAmortizacionQuery>) session.getAttribute("listCuentaAmortizacionQuery");
            modelWrapper.getData().setListCuentaAmortizacionQuery(listCuentaAmortizacionQuery);
                        
			mttoCuentaPorCobrarService.update(modelWrapper.getData());
			session.setAttribute("listCuentaAmortizacionQuery",null);
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="/destroy")
	public @ResponseBody Map<String,? extends Object> destroy(@RequestBody ModelWrapper<CuentaXCobrarQuery> modelWrapper, HttpSession session) {
		try{
			Map<String, Object> paramMap = null;
			paramMap = this.getParamMap();
			paramMap.put("id_cuenta_x_cobrar", modelWrapper.getData().getId_cuenta_x_cobrar());
			List<CuentaAmortizacionQuery> listCuentaAmortizacionQuery = this.mttoCuentaPorCobrarService.selectByQuery(CuentaAmortizacionQueryMapper.class, paramMap);
			modelWrapper.getData().setListCuentaAmortizacionQuery(listCuentaAmortizacionQuery);
			mttoCuentaPorCobrarService.destroy(modelWrapper.getData());
			session.setAttribute("listCuentaAmortizacionQuery",null);
			return JsonReturnUtil.success();
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/listCuentaAmortizacionQuery")
	public @ResponseBody Map<String,? extends Object> listCuentaAmortizacionQuery(Integer id_cuenta_x_cobrar, int start, int limit, HttpSession session) throws Exception {
		try{
		
			List<CuentaAmortizacionQuery> listCuentaAmortizacionQuery;
			List<CuentaAmortizacionQuery> subListCuentaAmortizacionQuery;
	
			if(id_cuenta_x_cobrar == null){
				listCuentaAmortizacionQuery = (List<CuentaAmortizacionQuery>) session.getAttribute("listCuentaAmortizacionQuery");
			}else if(id_cuenta_x_cobrar.equals(-1)){
				listCuentaAmortizacionQuery = new ArrayList<CuentaAmortizacionQuery>();
			}else{
				Map<String, Object> paramMap = this.getParamMap();
				paramMap.put("id_cuenta_x_cobrar", id_cuenta_x_cobrar);
				listCuentaAmortizacionQuery = this.mttoCuentaPorCobrarService.selectByQuery(CuentaAmortizacionQueryMapper.class, paramMap);
				this.setRandomId(listCuentaAmortizacionQuery);
			}
	
			if(listCuentaAmortizacionQuery == null){
				listCuentaAmortizacionQuery = new ArrayList<CuentaAmortizacionQuery>();
			}
			session.setAttribute("listCuentaAmortizacionQuery",listCuentaAmortizacionQuery);
			int size = listCuentaAmortizacionQuery.size();
			subListCuentaAmortizacionQuery = (List<CuentaAmortizacionQuery>) this.getSubList(listCuentaAmortizacionQuery, start, limit);
			return JsonReturnUtil.success(subListCuentaAmortizacionQuery,size);
			
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/createCuentaAmortizacionQuery")
	public @ResponseBody Map<String,? extends Object> createCuentaAmortizacionQuery(@RequestBody ModelWrapper<CuentaAmortizacionQuery> modelWrapper, HttpSession session) {
		try{
		
			List<CuentaAmortizacionQuery> listCuentaAmortizacionQuery = (List<CuentaAmortizacionQuery>) session.getAttribute("listCuentaAmortizacionQuery");
			int randomInt = this.getNegativeIdRandom();
			modelWrapper.getData().setRownum(randomInt);
			modelWrapper.getData().setId_cuenta_amortizacion(randomInt);
			modelWrapper.getData().setNewEntry(true);
			if(listCuentaAmortizacionQuery == null){
				listCuentaAmortizacionQuery = new ArrayList<CuentaAmortizacionQuery>();
			}
			listCuentaAmortizacionQuery.add(modelWrapper.getData());
	
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/updateCuentaAmortizacionQuery")
	public @ResponseBody Map<String,? extends Object> updateCuentaAmortizacionQuery(@RequestBody ModelWrapper<CuentaAmortizacionQuery> modelWrapper, HttpSession session) {
		try{
		
			List<CuentaAmortizacionQuery> listCuentaAmortizacionQuery = (List<CuentaAmortizacionQuery>) session.getAttribute("listCuentaAmortizacionQuery");
			CuentaAmortizacionQuery cuentaAmortizacionQuery = (CuentaAmortizacionQuery) this.find(listCuentaAmortizacionQuery, modelWrapper.getData());
			
			if(cuentaAmortizacionQuery.getRownum().intValue() > 0){
				modelWrapper.getData().setUpdatedRecord(true);
				modelWrapper.getData().setNewEntry(false);
				modelWrapper.getData().setRemovedRecord(false);
			}else{
				modelWrapper.getData().setNewEntry(true);
				modelWrapper.getData().setUpdatedRecord(false);
				modelWrapper.getData().setRemovedRecord(false);
			}
			
			if(cuentaAmortizacionQuery != null){
	        	listCuentaAmortizacionQuery.set(listCuentaAmortizacionQuery.indexOf(cuentaAmortizacionQuery), modelWrapper.getData());
			}
			return JsonReturnUtil.success();

		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value="/destroyCuentaAmortizacionQuery")
	public @ResponseBody Map<String,? extends Object> destroyCuentaAmortizacionQuery(@RequestBody ModelWrapper<CuentaAmortizacionQuery> modelWrapper, HttpSession session) {
		try{
		
			List<CuentaAmortizacionQuery> listCuentaAmortizacionQuery = (List<CuentaAmortizacionQuery>) session.getAttribute("listCuentaAmortizacionQuery");
			CuentaAmortizacionQuery cuentaAmortizacionQuery = (CuentaAmortizacionQuery) this.find(listCuentaAmortizacionQuery, modelWrapper.getData());
			modelWrapper.getData().setRemovedRecord(true);
			if(cuentaAmortizacionQuery != null){
			
				if(cuentaAmortizacionQuery.getRownum().intValue() > 0){
					listCuentaAmortizacionQuery.set(listCuentaAmortizacionQuery.indexOf(cuentaAmortizacionQuery), modelWrapper.getData());
				}else{
					listCuentaAmortizacionQuery.remove(listCuentaAmortizacionQuery.indexOf(cuentaAmortizacionQuery));
				}
				
			}		
	        return JsonReturnUtil.success();
	        
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
		
	}
}