/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by GeneratorCrud v.1.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   04/03/2016 20:30:30
*/

package pe.com.acme.inavi.ws.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import pe.com.acme.util.web.ControllerHelper;
import pe.com.acme.util.JsonReturnUtil;
import pe.com.acme.util.ModelWrapper;

import pe.com.acme.inavi.business.service.GestionarProveedoresService;
import pe.com.acme.query.mybatis.model.ProveedorQuery;
import pe.com.acme.query.mybatis.model.ProveedorQueryCriteria;

@Controller
@RequestMapping("/GestionarProveedores")
public class GestionarProveedoresController extends ControllerHelper {

    private static Logger log = Logger.getLogger(GestionarProveedoresController.class);

	@Autowired
	private GestionarProveedoresService gestionarProveedoresService;
	
	@RequestMapping(value="/list")
	public @ResponseBody Map<String,? extends Object> list(HttpServletRequest request) {
		try{
			ProveedorQueryCriteria proveedorQueryCriteria = this.loadCriteria(request, ProveedorQueryCriteria.class);
            List<ProveedorQuery> listProveedorQuery = gestionarProveedoresService.list(proveedorQueryCriteria);
			int count = gestionarProveedoresService.countRecords(proveedorQueryCriteria);
			return JsonReturnUtil.success(listProveedorQuery,count);
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="/create")
	public @ResponseBody Map<String,? extends Object> create(@RequestBody ModelWrapper<ProveedorQuery> modelWrapper) {
		try{
			gestionarProveedoresService.create(modelWrapper.getData());
			return JsonReturnUtil.success(modelWrapper.getData().getId_persona());
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="/update")
	public @ResponseBody Map<String,? extends Object> update(@RequestBody ModelWrapper<ProveedorQuery> modelWrapper) {
		try{
			gestionarProveedoresService.update(modelWrapper.getData());
			return JsonReturnUtil.success();
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
	
	@RequestMapping(value="/destroy")
	public @ResponseBody Map<String,? extends Object> destroy(@RequestBody ModelWrapper<ProveedorQuery> modelWrapper) {
		try{
			gestionarProveedoresService.destroy(modelWrapper.getData());
			return JsonReturnUtil.success();
		} catch (Exception e) {
            log.error(e.getMessage(),e);
			return JsonReturnUtil.exception(e.getMessage());
		}
	}
}
