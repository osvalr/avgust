/*
* Copyright «©» 2016, J.R Totem. All rights reserved.
*
* This file was generated by MybatisModelGenerator v.3.0.
* All changes made in this file will be lost if you recompile the source schema.
*
* [GeneratorCrud v.1.0] by JRaffo 
*/

/**
* @author  Javier Raffo
* @version 1.0
* @since   18/07/2016 00:27:51
*/

Ext.define('MyApp.controller.GestionarBoletaElectronica.MainController', {
    extend: 'Ext.app.Controller',

    stores: ['GestionarBoletaElectronica.MainStore'],

    models: ['GestionarBoletaElectronica.MainModel'],

    views: ['GestionarBoletaElectronica.Edit', 'GestionarBoletaElectronica.List','GestionarBoletaElectronica.GenerarDocumentosWindow',],

    refs: [
    	{
            ref: 'GestionarBoletaElectronicaPanel',
            selector: 'panel'
        },
        {
            ref: 'GestionarBoletaElectronicaList',
            selector: 'GestionarBoletaElectronicaList'
        }
    ],

    init: function() {
    
        Ext.getStore('GestionarBoletaElectronica.MainStore').addListener('beforeload',this.setExtraParams,this);
        
        this.control({
            'GestionarBoletaElectronicaList dataview': {
                itemdblclick: this.editRecord
            },
            'GestionarBoletaElectronicaList button[action=filter]': {
                click: this.refreshGrid
            },
            'GestionarBoletaElectronicaList button[action=clearFilter]': {
                click: this.resetForm
            },
            'GestionarBoletaElectronicaList combobox': {
                change: this.refreshGrid
            },
            'GestionarBoletaElectronicaList textfield': {
            	specialkey: this.onKeyEnter
            },
            'GestionarBoletaElectronicaList button[action=mostrarGenerarDocumentosWindow]': {
            	click: this.mostrarGenerarDocumentosWindow
            },
            'GenerarDocumentosWindow button[action=generarDocumentos]': {
            	click: this.generarDocumentos
            },
            'GestionarBoletaElectronicaList button[action=descargarDocumento]': {
                click: this.descargarDocumento
            }
        });
    },

    editRecord: function(grid, record) {
    	
        var edit = Ext.create('MyApp.view.GestionarBoletaElectronica.Edit').show();
        var form = edit.down('form');
        if(record.data){
        	edit.down('form').loadRecord(record);
        	
        	var subModel_BoletaDetalleWebQuery = Ext.getCmp('subModel_BoletaDetalleWebQuery');
        	var ventas_key = form.getForm().findField('ventas_key');
        	
			subModel_BoletaDetalleWebQuery.store.reload({params: {ventas_key: ventas_key.getValue(), start:0, limit:10}});
			
        }
    },
    
    mostrarGenerarDocumentosWindow: function() {
    	
        var edit = Ext.create('MyApp.view.GestionarBoletaElectronica.GenerarDocumentosWindow').show();

    },
    
    generarDocumentos: function(button) {
    	var win = button.up('window');
        var form = win.down('form');
                
        if (form.isValid()) {
	        Ext.Msg.confirm('Confirmar','¿Estás seguro de continuar?',function (btn) {
	            
	            if (btn == 'yes') {
        
			        var sb = Ext.getCmp('form_generarDocumentos_statusbar');
					sb.showBusy('Procesando...');
					win.getEl().mask();
			        
					Ext.Ajax.setTimeout(500000);
					
			        Ext.Ajax.request({
			            method: 'GET',
			            url: '/InvoiceElecWSRestApp/api/boleta/generar',
			            params: form.getValues(),
			            success: function( result, request ){
			            	
			            	sb.setStatus({text:''});
		            		win.getEl().unmask();
			            	
			            	var json = Ext.JSON.decode(result.responseText);
			            	console.log(json);
			            	
			            	var strMsg = 'Se generaron '+ json.record.numSuccess +' documento(s) electrónico(s).<br/> No se pudo generar '+ json.record.numError +' documento(s) electrónicos.';
			            	
			            	Ext.MessageBox.show({
		                        title: 'Resultado de proceso',
		                        msg: strMsg,
		                        icon: Ext.MessageBox.INFO,
		                        buttons: Ext.Msg.OK
		                    });
			            	
			            },
	        	        failure: function (batch, eOpts) {
                            sb.setStatus({text:'Error intentado generar documentos.'});
				        	win.getEl().unmask();
	        	        }
			        });
        
	            }
	            
	        });
        }
    },
    
    descargarDocumento: function(button) {
    	
    	var grid = this.getGestionarBoletaElectronicaList();
    	var record = grid.getSelectionModel().getSelection();
    	
    	if(record.length > 0){
    		
    		if(record[0].data.estado_doc != null){
    			window.open('/InvoiceElecWSRestApp/api/Boleta/documento/'+record[0].data.numf_correl, '_blank');
    		}else{
    			Ext.MessageBox.show({
                    title: 'Error',
                    msg: 'No hay documento generado.',
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.Msg.OK
                });
    		}
    		
    	}

    },
    
    refreshGrid: function() {
    	var store = Ext.getStore('GestionarBoletaElectronica.MainStore');
    	store.load({start:0});
    },
    resetForm: function() {
    	var store = Ext.getStore('GestionarBoletaElectronica.MainStore');
        var form = Ext.getCmp('form_filter_GestionarBoletaElectronica');
        form.reset();
    	store.load({start:0});
    },
    onKeyEnter: function(field, event, options) {
        if (event.getKey() == event.ENTER) {
        	var store = Ext.getStore('GestionarBoletaElectronica.MainStore');
        	store.load({start:0});
        }
    },
    setExtraParams: function(field, event, options) {
    	var store = Ext.getStore('GestionarBoletaElectronica.MainStore');
        var form = Ext.getCmp('form_filter_GestionarBoletaElectronica');
        var values = form.getValues();
    	store.getProxy().extraParams = values;
    }
    
});